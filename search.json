[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Methods Camp",
    "section": "",
    "text": "Class schedule\nOn class days, we will have a lunch break from 12:00-1:00 PM. We’ll also take short breaks periodically during the morning and afternoon sessions as needed.",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "index.html#class-schedule",
    "href": "index.html#class-schedule",
    "title": "Methods Camp",
    "section": "",
    "text": "Date\nTime\nLocation\n\n\n\n\nFri, Aug. 16\n9:00 AM - 4:00 PM\nRLP 2.606\n\n\nSat, Aug. 17\nNo class\n-\n\n\nSun, Aug. 18\nNo class\n-\n\n\nMon, Aug. 19\n9:00 AM - 4:00 PM\nBAT 5.108\n\n\nTue, Aug. 20\n9:00 AM - 4:00 PM\nRLP 2.606\n\n\nWed, Aug. 21\n9:00 AM - 4:00 PM\nBAT 5.108\n\n\nThu, Aug. 22\n9:00 AM - 4:00 PM\nRLP 2.606",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "index.html#description",
    "href": "index.html#description",
    "title": "Methods Camp",
    "section": "Description",
    "text": "Description\nWelcome to Introduction to Methods for Political Science, aka “Methods Camp”! Methods Camp is designed to give everyone a chance to brush up on some skills in preparation for the introductory Statistics and Formal Theory courses. The other goal of Methods Camp is to allow you to get to know your cohort. We hope that matrix algebra and the chain rule will still prove to be good bonding exercises!\nAs you can see from the above schedule, we’ll be meeting on Friday, August 16th as well as from Monday, August 19th through Thursday, August 22nd. Classes at UT begin the start of the following week on Monday, August 26th. Below is a tentative schedule outlining what will be covered in the class, although we may rearrange things if we find we’re going too slowly or too quickly through the material.",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "index.html#course-outline",
    "href": "index.html#course-outline",
    "title": "Methods Camp",
    "section": "Course outline",
    "text": "Course outline\n1 Friday morning: Intro to R\n\nIntroductions\nR and RStudio: basics\nObjects (vectors, matrices, data frames, etc.)\nBasic functions (mean(), length(), etc.)\nPackages: installation and loading (including the tidyverse)\n\n2 Friday afternoon: Tidy data analysis I\n\nTidy data\nData wrangling with dplyr\nData visualization basics with ggplot2\n\n3 Monday morning: Functions\n\nDefinitions\nFunctions in R\nCommon types of functions\nLogarithms and exponents\nComposite functions\n\n4 Monday afternoon: Calculus\n\nDerivatives\nOptimization\nIntegrals\n\n5 Tuesday morning: Matrices\n\nMatrices\nSystems of linear equations\nMatrix operations (multiplication, transpose, inverse, determinant)\nSolving systems of linear equations in matrix form (and why that’s cool)\nIntroduction to OLS\n\n6 Tuesday afternoon: Tidy data analysis II\n\nLoading data in different formats (.csv, R, Excel, Stata, SPSS)\nRecoding values (if_else(), case_when())\nHandling missing values\nPivoting data\nMerging data\nPlotting extensions (trend graphs, facets, customization)\n\n7 Wednesday morning: Probability\n\nProbability: basic concepts\nRandom variables, probability distributions, and their properties\nCommon probability distributions\n\n8 Wednesday afternoon: Statistics and simulations\n\nStatistics: basic concepts\nRandom sampling and loops in R\nSimulation example: bootstrapping\n\n9 Thursday morning: Coding with AI\n\nVisualization tools\n⁠Statistical testing and simulation\n⁠Text analysis examples\n\n10 Thursday afternoon: Wrap-up\n\nProject management fundamentals\nSelf-study resources and materials\nOther software (Overleaf, Zotero, etc.)\nMethods resources at UT",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "index.html#contact-info",
    "href": "index.html#contact-info",
    "title": "Methods Camp",
    "section": "Contact info",
    "text": "Contact info\nIf you have any questions during or outside of methods camp, you can contact us via email. Or if you are curious about our research, you can also check out our respective websites and Twitter accounts (or should we say X…):\n\nAndrés Cruz: andres.cruz at utexas dot edu [Website] [Twitter]\nMeiying Xu: xu.meiying at utexas dot edu [Website] [Twitter]",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "index.html#acknowledgements",
    "href": "index.html#acknowledgements",
    "title": "Methods Camp",
    "section": "Acknowledgements",
    "text": "Acknowledgements\nWe thank previous Methods Camp instructors for their accumulated experience and materials, which we have based ours upon. UT Gov Prof. Max Goplerud gave us amazing feedback for this iteration of Methods Camp (2024). All errors remain our own (and will hopefully be fixed with your help!).",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "index.html#materials-from-previous-editions",
    "href": "index.html#materials-from-previous-editions",
    "title": "Methods Camp",
    "section": "Materials from previous editions",
    "text": "Materials from previous editions\n\n2023: co-taught by Andrés Cruz and Matt Martin.\n\n\n\n\n\nArel-Bundock, Vincent, Nils Enevoldsen, and CJ Yetman. 2018. “Countrycode: An r Package to Convert Country Names and Country Codes.” Journal of Open Source Software 3 (28): 848. https://doi.org/10.21105/joss.00848.\n\n\nAronow, Peter M, and Benjamin T Miller. 2019. Foundations of Agnostic Statistics. Cambridge University Press.\n\n\nBank, World. 2023. “World Bank Open Data.” https://data.worldbank.org/.\n\n\nBaydin, Atılım Günes, Barak A. Pearlmutter, Alexey Andreyevich Radul, and Jeffrey Mark Siskind. 2017. “Automatic Differentiation in Machine Learning: A Survey.” The Journal of Machine Learning Research 18 (1): 5595–5637.\n\n\nCoppedge, Michael, John Gerring, Carl Henrik Knutsen, Staffan I. Lindberg, Jan Teorell, David Altman, Michael Bernhard, et al. 2022. “V-Dem Codebook V12.” Varieties of Democracy (V-Dem) Project. https://www.v-dem.net/dsarchive.html.\n\n\nDahlberg, Stefan, Aksen Sundström, Sören Holmberg, Bo Rothstein, Natalia Alvarado Pachon, Cem Mert Dalli, and Yente Meijers. 2023. “The Quality of Government Basic Dataset, Version Jan23.” University of Gothenburg: The Quality of Government Institute. https://www.gu.se/en/quality-government doi:10.18157/qogbasjan23.\n\n\nFiveThirtyEight. 2021. “Tracking Congress In The Age Of Trump [Dataset].” https://projects.fivethirtyeight.com/congress-trump-score/.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science: An Introduction in Tidyverse. Princeton; Oxford: Princeton University Press.\n\n\nMoore, Will H., and David A. Siegel. 2013. A Mathematics Course for Political and Social Research. Princeton, NJ: Princeton University Pres.\n\n\nPontin, Jason. 2007. “Oppenheimer’s Ghost.” MIT Technology Review, October 15, 2007. https://www.technologyreview.com/2007/10/15/223531/oppenheimers-ghost-3/.\n\n\nRobinson, David. 2020. Fuzzyjoin: Join Tables Together on Inexact Matching. https://github.com/dgrtwo/fuzzyjoin.\n\n\nRossi, Hugo. 1996. “Mathematics Is an Edifice, Not a Toolbox.” Notices of the AMS 43 (10): 1108.\n\n\nSmith, Danny. 2020. Survey Research Datasets and R. https://socialresearchcentre.github.io/r_survey_datasets/.\n\n\nU. S. Department of Agriculture [USDA], Agricultural Research Service. 2019. “Department of Agriculture Agricultural Research Service.” https://fdc.nal.usda.gov/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\nWickham, Hadley, Danielle Navarro, and Thomas Lin Pedersen. 2023. Ggplot2: Elegant Graphics for Data Analysis. 3rd ed. https://ggplot2-book.org/.",
    "crumbs": [
      "Class schedule"
    ]
  },
  {
    "objectID": "00_setup.html",
    "href": "00_setup.html",
    "title": "Setup",
    "section": "",
    "text": "Installing R and RStudio\nR is a programming language optimized for statistics and data analysis. Most people use R from RStudio, a graphical user interface (GUI) that includes a file pane, a graphics pane, and other goodies. Both R and RStudio are open source, i.e., free as in beer and free as in freedom!\nYour first steps should be to install R and RStudio, in that order (if you have installed these programs before, make sure that your versions are up-to-date—if they are not, simply follow the instructions below to re-install them):\nAfter these two steps, you can open RStudio in your system, as you would with any program. You should see something like this:\nThat’s it for the installation! We also strongly recommend that you change a couple of RStudio’s default settings.1 You can change settings by clicking on Tools &gt; Global Options in the menubar. Here are our recommendations:",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "00_setup.html#installing-r-and-rstudio",
    "href": "00_setup.html#installing-r-and-rstudio",
    "title": "Setup",
    "section": "",
    "text": "Download and install R from the official website, CRAN. Click on “Download R for &lt;Windows/MacOS&gt;” and follow the instructions. If you have a Mac, make sure to select the version appropriate for your system (Apple Silicon for newer M1/M2/M3 Macs and Intel for older Macs).\nDownload and install RStudio from the official website. Scroll down and select the installer for your operating system (most likely the .exe for Windows 10/11 or the .dmg for macOS 12+).\n\n\n\n\n\n\n\n\nFigure 1: How RStudio looks after a clean installation.\n\n\n\n\n\n\n\n\n\nNote for Windows users\n\n\n\nWhile the installation steps above should be enough for most tasks, we also suggest that Windows users install RTools (click on the “Rtools44 installer” link at the middle of the package to get the .exe file). Rtools is needed on Windows to install some advanced packages, so it is a good idea to have it on your system.\n\n\n\n\nGeneral &gt; Uncheck \"Restore .RData into workspace at startup\"\nGeneral &gt; Save workspace to .RData on Exit &gt; Select \"Never\"\nCode &gt; Check \"Use native pipe operator\"\nTools &gt; Global Options &gt; Appearance to change to a dark theme, if you want! Pros: better for night sessions, hacker vibes…",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "00_setup.html#setting-up-for-methods-camp",
    "href": "00_setup.html#setting-up-for-methods-camp",
    "title": "Setup",
    "section": "Setting up for Methods Camp",
    "text": "Setting up for Methods Camp\nAll materials for Methods Camp are both on this website and available as RStudio projects for you to execute locally. An RStudio project is simply a folder where one keeps scripts, datasets, and other files needed for a data analysis project.\nBelow are RStudio projects for you to download, available as .zip compressed files. On MacOS, the file will be uncompressed automatically. On Windows, you should do Right click &gt; Extract all.\n\nDownload Part 1 of the class materials.\n(Additional projects will be available in the following days).\n\n\n\n\n\n\n\nWarning\n\n\n\nMake sure to properly unzip the materials. Double-clicking the .zip file on most Windows systems will not unzip the folder—you must do Right click &gt; Extract all.\n\n\nYou should now have a folder called methodscamp_part1/ on your computer. Navigate to the methodscamp_part1.Rproj file within it and open it. RStudio should open the project right away. You should see methodscamp_part1 on the top-right of RStudio—this indicates that you are working in our RStudio project.\n\n\n\n\n\n\nFigure 2: How the bottom-right corner of RStudio looks after opening our project.\n\n\n\nThat’s all for setup! We can now start coding. After opening our RStudio project, we’ll begin by opening the 01_r_intro.qmd file from the “Files” panel, in the bottom-right portion of RStudio. This is a Quarto document,2 which contains both code and explanations (you can also read the materials in the next chapter of this website).\n\n\n\n\nArel-Bundock, Vincent, Nils Enevoldsen, and CJ Yetman. 2018. “Countrycode: An r Package to Convert Country Names and Country Codes.” Journal of Open Source Software 3 (28): 848. https://doi.org/10.21105/joss.00848.\n\n\nAronow, Peter M, and Benjamin T Miller. 2019. Foundations of Agnostic Statistics. Cambridge University Press.\n\n\nBank, World. 2023. “World Bank Open Data.” https://data.worldbank.org/.\n\n\nBaydin, Atılım Günes, Barak A. Pearlmutter, Alexey Andreyevich Radul, and Jeffrey Mark Siskind. 2017. “Automatic Differentiation in Machine Learning: A Survey.” The Journal of Machine Learning Research 18 (1): 5595–5637.\n\n\nCoppedge, Michael, John Gerring, Carl Henrik Knutsen, Staffan I. Lindberg, Jan Teorell, David Altman, Michael Bernhard, et al. 2022. “V-Dem Codebook V12.” Varieties of Democracy (V-Dem) Project. https://www.v-dem.net/dsarchive.html.\n\n\nDahlberg, Stefan, Aksen Sundström, Sören Holmberg, Bo Rothstein, Natalia Alvarado Pachon, Cem Mert Dalli, and Yente Meijers. 2023. “The Quality of Government Basic Dataset, Version Jan23.” University of Gothenburg: The Quality of Government Institute. https://www.gu.se/en/quality-government doi:10.18157/qogbasjan23.\n\n\nFiveThirtyEight. 2021. “Tracking Congress In The Age Of Trump [Dataset].” https://projects.fivethirtyeight.com/congress-trump-score/.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science: An Introduction in Tidyverse. Princeton; Oxford: Princeton University Press.\n\n\nMoore, Will H., and David A. Siegel. 2013. A Mathematics Course for Political and Social Research. Princeton, NJ: Princeton University Pres.\n\n\nPontin, Jason. 2007. “Oppenheimer’s Ghost.” MIT Technology Review, October 15, 2007. https://www.technologyreview.com/2007/10/15/223531/oppenheimers-ghost-3/.\n\n\nRobinson, David. 2020. Fuzzyjoin: Join Tables Together on Inexact Matching. https://github.com/dgrtwo/fuzzyjoin.\n\n\nRossi, Hugo. 1996. “Mathematics Is an Edifice, Not a Toolbox.” Notices of the AMS 43 (10): 1108.\n\n\nSmith, Danny. 2020. Survey Research Datasets and R. https://socialresearchcentre.github.io/r_survey_datasets/.\n\n\nU. S. Department of Agriculture [USDA], Agricultural Research Service. 2019. “Department of Agriculture Agricultural Research Service.” https://fdc.nal.usda.gov/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\nWickham, Hadley, Danielle Navarro, and Thomas Lin Pedersen. 2023. Ggplot2: Elegant Graphics for Data Analysis. 3rd ed. https://ggplot2-book.org/.",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "00_setup.html#footnotes",
    "href": "00_setup.html#footnotes",
    "title": "Setup",
    "section": "",
    "text": "The idea behind these settings (or at least the first two) is to force R to start from scratch with each new session. No lingering objects from previous coding sessions avoids misunderstandings and helps with reproducibility!↩︎\nPerhaps you have used R Markdown before. Quarto is the next iteration of R Markdown, and is both more flexible and more powerful!↩︎",
    "crumbs": [
      "Setup"
    ]
  },
  {
    "objectID": "01_r_intro.html",
    "href": "01_r_intro.html",
    "title": "1  Intro to R",
    "section": "",
    "text": "1.1 Objects\nA huge part of R is working with objects. Let’s see how they work:\nmy_object &lt;- 10 # opt/alt + minus sign will make the arrow\nmy_object # to print the value of an object, just call its name\n\n[1] 10\nWe can now use this object in our operations:\n2 ^ my_object\n\n[1] 1024\nOr even create another object out of it:\nmy_object2 &lt;- my_object * 2\nmy_object2\n\n[1] 20\nYou can delete objects with the rm() function (for “remove”):\nrm(my_object2)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R</span>"
    ]
  },
  {
    "objectID": "01_r_intro.html#vectors-and-functions",
    "href": "01_r_intro.html#vectors-and-functions",
    "title": "1  Intro to R",
    "section": "1.2 Vectors and functions",
    "text": "1.2 Vectors and functions\nObjects can be of different types. One of the most useful ones is the vector, which holds a series of values. To create one manually, we can use the c() function (for “combine”):\n\nmy_vector &lt;- c(6, -11, my_object, 0, 20)\n\n\nmy_vector\n\n[1]   6 -11  10   0  20\n\n\nOne can also define vectors by sequences:\n\n3:10\n\n[1]  3  4  5  6  7  8  9 10\n\n\nWe can use square brackets to retrieve parts of vectors:\n\nmy_vector[4] # fourth element\n\n[1] 0\n\n\n\nmy_vector[1:2] # first two elements\n\n[1]   6 -11\n\n\nLet’s check out some basic functions we can use with numbers and numeric vectors:\n\nsqrt(my_object) # squared root\n\n[1] 3.162278\n\n\n\nlog(my_object) # logarithm (natural by default)\n\n[1] 2.302585\n\n\n\nabs(-5) # absolute value\n\n[1] 5\n\n\n\nmean(my_vector)\n\n[1] 5\n\n\n\nmedian(my_vector)\n\n[1] 6\n\n\n\nsd(my_vector) # standard deviation\n\n[1] 11.53256\n\n\n\nsum(my_vector)\n\n[1] 25\n\n\n\nmin(my_vector) # minimum value\n\n[1] -11\n\n\n\nmax(my_vector) # maximum value\n\n[1] 20\n\n\n\nlength(my_vector) # length (number of elements)\n\n[1] 5\n\n\nNotice that if we wanted to save any of these results for later, we would need to assign them:\n\nmy_mean &lt;- mean(my_vector)\n\n\nmy_mean\n\n[1] 5\n\n\nThese functions are quite simple: they take one object and do one operation. A lot of functions are a bit more complex—they take multiple objects or take options. For example, see the sort() function, which by default sorts a vector increasingly:\n\nsort(my_vector)\n\n[1] -11   0   6  10  20\n\n\nIf we instead want to sort our vector decreasingly, we can use the decreasing = TRUE argument (T also works as an abbreviation for TRUE).\n\nsort(my_vector, decreasing = TRUE)\n\n[1]  20  10   6   0 -11\n\n\n\n\n\n\n\n\nTip\n\n\n\nIf you use the argument values in order, you can avoid writing the argument names (see below). This is sometimes useful, but can also lead to confusing code—use it with caution.\n\nsort(my_vector, T)\n\n[1]  20  10   6   0 -11\n\n\n\n\nA useful function to create vectors in sequence is seq(). Notice its arguments:\n\nseq(from = 30, to = 100, by = 5)\n\n [1]  30  35  40  45  50  55  60  65  70  75  80  85  90  95 100\n\n\nTo check the arguments of a function, you can examine its help file: look the function up on the “Help” panel on RStudio or use a command like the following: ?sort.\n\n\n\n\n\n\nExercise\n\n\n\nExamine the help file of the log() function. How can we compute the the base-10 logarithm of my_object? Your code:\n\n\nOther than numeric vectors, character vectors are also useful:\n\nmy_character_vector &lt;- c(\"Apple\", \"Orange\", \"Watermelon\", \"Banana\")\n\n\nmy_character_vector[3]\n\n[1] \"Watermelon\"\n\n\n\nnchar(my_character_vector) # count number of characters\n\n[1]  5  6 10  6",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R</span>"
    ]
  },
  {
    "objectID": "01_r_intro.html#data-frames-and-lists",
    "href": "01_r_intro.html#data-frames-and-lists",
    "title": "1  Intro to R",
    "section": "1.3 Data frames and lists",
    "text": "1.3 Data frames and lists\nAnother useful object type is the data frame. Data frames can store multiple vectors in a tabular format. We can manually create one with the data.frame() function:\n\nmy_data_frame &lt;- data.frame(fruit = my_character_vector,\n                            calories_per_100g = c(52, 47, 30, 89),\n                            water_per_100g = c(85.6, 86.8, 91.4, 74.9))\n\n\nmy_data_frame\n\n       fruit calories_per_100g water_per_100g\n1      Apple                52           85.6\n2     Orange                47           86.8\n3 Watermelon                30           91.4\n4     Banana                89           74.9\n\n\nNow we have a little 4x3 data frame of fruits with their calorie counts and water composition. We gathered the nutritional information from the USDA (2019).\nWe can use the data_frame$column construct to access the vectors within the data frame:\n\nmean(my_data_frame$calories_per_100g)\n\n[1] 54.5\n\n\n\n\n\n\n\n\nExercise\n\n\n\nObtain the maximum value of water content per 100g in the data. Your code:\n\n\nSome useful commands to learn attributes of our data frame:\n\ndim(my_data_frame)\n\n[1] 4 3\n\n\n\nnrow(my_data_frame)\n\n[1] 4\n\n\n\nnames(my_data_frame) # column names\n\n[1] \"fruit\"             \"calories_per_100g\" \"water_per_100g\"   \n\n\nWe will learn much more about data frames in our next module on data analysis.\nAfter talking about vectors and data frames, the last object type that we will cover is the list. Lists are super flexible objects that can contain just about anything:\n\nmy_list &lt;- list(my_object, my_vector, my_data_frame)\n\n\nmy_list\n\n[[1]]\n[1] 10\n\n[[2]]\n[1]   6 -11  10   0  20\n\n[[3]]\n       fruit calories_per_100g water_per_100g\n1      Apple                52           85.6\n2     Orange                47           86.8\n3 Watermelon                30           91.4\n4     Banana                89           74.9\n\n\nTo retrieve the elements of a list, we need to use double square brackets:\n\nmy_list[[1]]\n\n[1] 10\n\n\nLists are sometimes useful due to their flexibility, but are much less common in routine data analysis compared to vectors or data frames.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R</span>"
    ]
  },
  {
    "objectID": "01_r_intro.html#packages",
    "href": "01_r_intro.html#packages",
    "title": "1  Intro to R",
    "section": "1.4 Packages",
    "text": "1.4 Packages\nThe R community has developed thousands of packages, which are specialized collections of functions, datasets, and other resources. To install one, you should use the install.packages() command. Below we will install the tidyverse package, a suite for data analysis that we will use in the next modules. You just need to install packages once, and then they will be available system-wide.\n\ninstall.packages(\"tidyverse\") # this can take a couple of minutes\n\nIf you want to use an installed package in your script, you must load it with the library() function. Some packages, as shown below, will print descriptive messages once loaded.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\n\n\n\nWarning\n\n\n\nRemember that install.packages(\"package\") needs to be executed just once, while library(package) needs to be in each script in which you plan to use the package. In general, never include install.packages(\"package\") as part of your scripts or Quarto documents!\n\n\n\n\n\n\nArel-Bundock, Vincent, Nils Enevoldsen, and CJ Yetman. 2018. “Countrycode: An r Package to Convert Country Names and Country Codes.” Journal of Open Source Software 3 (28): 848. https://doi.org/10.21105/joss.00848.\n\n\nAronow, Peter M, and Benjamin T Miller. 2019. Foundations of Agnostic Statistics. Cambridge University Press.\n\n\nBank, World. 2023. “World Bank Open Data.” https://data.worldbank.org/.\n\n\nBaydin, Atılım Günes, Barak A. Pearlmutter, Alexey Andreyevich Radul, and Jeffrey Mark Siskind. 2017. “Automatic Differentiation in Machine Learning: A Survey.” The Journal of Machine Learning Research 18 (1): 5595–5637.\n\n\nCoppedge, Michael, John Gerring, Carl Henrik Knutsen, Staffan I. Lindberg, Jan Teorell, David Altman, Michael Bernhard, et al. 2022. “V-Dem Codebook V12.” Varieties of Democracy (V-Dem) Project. https://www.v-dem.net/dsarchive.html.\n\n\nDahlberg, Stefan, Aksen Sundström, Sören Holmberg, Bo Rothstein, Natalia Alvarado Pachon, Cem Mert Dalli, and Yente Meijers. 2023. “The Quality of Government Basic Dataset, Version Jan23.” University of Gothenburg: The Quality of Government Institute. https://www.gu.se/en/quality-government doi:10.18157/qogbasjan23.\n\n\nFiveThirtyEight. 2021. “Tracking Congress In The Age Of Trump [Dataset].” https://projects.fivethirtyeight.com/congress-trump-score/.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science: An Introduction in Tidyverse. Princeton; Oxford: Princeton University Press.\n\n\nMoore, Will H., and David A. Siegel. 2013. A Mathematics Course for Political and Social Research. Princeton, NJ: Princeton University Pres.\n\n\nPontin, Jason. 2007. “Oppenheimer’s Ghost.” MIT Technology Review, October 15, 2007. https://www.technologyreview.com/2007/10/15/223531/oppenheimers-ghost-3/.\n\n\nRobinson, David. 2020. Fuzzyjoin: Join Tables Together on Inexact Matching. https://github.com/dgrtwo/fuzzyjoin.\n\n\nRossi, Hugo. 1996. “Mathematics Is an Edifice, Not a Toolbox.” Notices of the AMS 43 (10): 1108.\n\n\nSmith, Danny. 2020. Survey Research Datasets and R. https://socialresearchcentre.github.io/r_survey_datasets/.\n\n\nU. S. Department of Agriculture [USDA], Agricultural Research Service. 2019. “Department of Agriculture Agricultural Research Service.” https://fdc.nal.usda.gov/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\nWickham, Hadley, Danielle Navarro, and Thomas Lin Pedersen. 2023. Ggplot2: Elegant Graphics for Data Analysis. 3rd ed. https://ggplot2-book.org/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Intro to R</span>"
    ]
  },
  {
    "objectID": "02_tidy_data1.html",
    "href": "02_tidy_data1.html",
    "title": "2  Tidy data analysis I",
    "section": "",
    "text": "2.1 Loading data\nThroughout this module we will work with a dataset of senators during the Trump presidency, which was adapted from FiveThirtyEight (2021).\nWe have stored the dataset in .csv format under the data/ subfolder. Loading it into R is simple (notice that we need to assign it to an object):\ntrump_scores &lt;- read_csv(\"data/trump_scores_538.csv\")\n\nRows: 122 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): bioguide, last_name, state, party\ndbl (4): num_votes, agree, agree_pred, margin_trump\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\ntrump_scores\n\n# A tibble: 122 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 A000360  Alexander  TN    R           118 0.890      0.856       26.0  \n 2 B000575  Blunt      MO    R           128 0.906      0.787       18.6  \n 3 B000944  Brown      OH    D           128 0.258      0.642        8.13 \n 4 B001135  Burr       NC    R           121 0.893      0.560        3.66 \n 5 B001230  Baldwin    WI    D           128 0.227      0.510        0.764\n 6 B001236  Boozman    AR    R           129 0.915      0.851       26.9  \n 7 B001243  Blackburn  TN    R           131 0.885      0.889       26.0  \n 8 B001261  Barrasso   WY    R           129 0.891      0.895       46.3  \n 9 B001267  Bennet     CO    D           121 0.273      0.417       -4.91 \n10 B001277  Blumenthal CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\nLet’s review the dataset’s columns:\nWe can inspect our data by using the interface above. An alternative is to run the command View(trump_scores) or click on the object in RStudio’s environment panel (in the top-right section).\nDo you have any questions about the data?\nBy the way, the tidyverse works amazingly with tidy data. If you can get your data to this format (and we will see ways to do this), your life will be much easier:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tidy data analysis I</span>"
    ]
  },
  {
    "objectID": "02_tidy_data1.html#loading-data",
    "href": "02_tidy_data1.html#loading-data",
    "title": "2  Tidy data analysis I",
    "section": "",
    "text": "bioguide: A unique ID for each politician, from the Congress Bioguide.\nlast_name\nstate\nparty\nnum_votes: Number of votes for which data was available.\nagree: Proportion (0-1) of votes in which the senator voted in agreement with Trump.\nagree_pred: Predicted proportion of vote agreement, calculated using Trump’s margin (see next variable).\nmargin_trump: Margin of victory (percentage points) of Trump in the senator’s state.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSource: Illustrations from the Openscapes blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tidy data analysis I</span>"
    ]
  },
  {
    "objectID": "02_tidy_data1.html#wrangling-data-with-dplyr",
    "href": "02_tidy_data1.html#wrangling-data-with-dplyr",
    "title": "2  Tidy data analysis I",
    "section": "2.2 Wrangling data with dplyr",
    "text": "2.2 Wrangling data with dplyr\nWe often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the tidyverse, these operations are conducted with multiple verbs, which we will review now.\n\n2.2.1 Selecting columns\nWe can select specific columns in our dataset with the select() function. All dplyr wrangling verbs take a data frame as their first argument—in this case, the columns we want to select are the other arguments.\n\nselect(trump_scores, last_name, party)\n\n# A tibble: 122 × 2\n   last_name  party\n   &lt;chr&gt;      &lt;chr&gt;\n 1 Alexander  R    \n 2 Blunt      R    \n 3 Brown      D    \n 4 Burr       R    \n 5 Baldwin    D    \n 6 Boozman    R    \n 7 Blackburn  R    \n 8 Barrasso   R    \n 9 Bennet     D    \n10 Blumenthal D    \n# ℹ 112 more rows\n\n\nThis is a good moment to talk about “pipes.” Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (|&gt;) “kick” the object on the left of the pipe to the first argument of the function on the right. One can read pipes as “then,” so the code below can be read as “take trump_scores, then select the columns last_name and party.” Pipes are very useful to chain multiple operations, as we will see in a moment.\n\ntrump_scores |&gt; \n  select(last_name, party)\n\n# A tibble: 122 × 2\n   last_name  party\n   &lt;chr&gt;      &lt;chr&gt;\n 1 Alexander  R    \n 2 Blunt      R    \n 3 Brown      D    \n 4 Burr       R    \n 5 Baldwin    D    \n 6 Boozman    R    \n 7 Blackburn  R    \n 8 Barrasso   R    \n 9 Bennet     D    \n10 Blumenthal D    \n# ℹ 112 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can insert a pipe with the Cmd/Ctrl + Shift + M shortcut. If you have not changed the default RStudio settings, an “old” pipe (%&gt;%) might appear. While most of the functionality is the same, the |&gt; “new” pipes are more readable and don’t need any extra packages (to use %&gt;% you need the tidyverse or one of its packages). You can change this RStudio option in Tools &gt; Global Options &gt; Code &gt; Use native pipe operator. Make sure to check the other suggested settings in our Setup module!\n\n\nGoing back to selecting columns, you can select ranges:\n\ntrump_scores |&gt; \n  select(bioguide:party)\n\n# A tibble: 122 × 4\n   bioguide last_name  state party\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;\n 1 A000360  Alexander  TN    R    \n 2 B000575  Blunt      MO    R    \n 3 B000944  Brown      OH    D    \n 4 B001135  Burr       NC    R    \n 5 B001230  Baldwin    WI    D    \n 6 B001236  Boozman    AR    R    \n 7 B001243  Blackburn  TN    R    \n 8 B001261  Barrasso   WY    R    \n 9 B001267  Bennet     CO    D    \n10 B001277  Blumenthal CT    D    \n# ℹ 112 more rows\n\n\nYou can also deselect columns using a minus sign:\n\ntrump_scores |&gt; \n  select(-last_name)\n\n# A tibble: 122 × 7\n   bioguide state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 A000360  TN    R           118 0.890      0.856       26.0  \n 2 B000575  MO    R           128 0.906      0.787       18.6  \n 3 B000944  OH    D           128 0.258      0.642        8.13 \n 4 B001135  NC    R           121 0.893      0.560        3.66 \n 5 B001230  WI    D           128 0.227      0.510        0.764\n 6 B001236  AR    R           129 0.915      0.851       26.9  \n 7 B001243  TN    R           131 0.885      0.889       26.0  \n 8 B001261  WY    R           129 0.891      0.895       46.3  \n 9 B001267  CO    D           121 0.273      0.417       -4.91 \n10 B001277  CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\n\n\nAnd use a few helper functions, like matches():\n\ntrump_scores |&gt; \n  select(last_name, matches(\"agree\"))\n\n# A tibble: 122 × 3\n   last_name  agree agree_pred\n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Alexander  0.890      0.856\n 2 Blunt      0.906      0.787\n 3 Brown      0.258      0.642\n 4 Burr       0.893      0.560\n 5 Baldwin    0.227      0.510\n 6 Boozman    0.915      0.851\n 7 Blackburn  0.885      0.889\n 8 Barrasso   0.891      0.895\n 9 Bennet     0.273      0.417\n10 Blumenthal 0.203      0.294\n# ℹ 112 more rows\n\n\nOr everything(), which we usually use to reorder columns:\n\ntrump_scores |&gt; \n  select(last_name, everything())\n\n# A tibble: 122 × 8\n   last_name  bioguide state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;      &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alexander  A000360  TN    R           118 0.890      0.856       26.0  \n 2 Blunt      B000575  MO    R           128 0.906      0.787       18.6  \n 3 Brown      B000944  OH    D           128 0.258      0.642        8.13 \n 4 Burr       B001135  NC    R           121 0.893      0.560        3.66 \n 5 Baldwin    B001230  WI    D           128 0.227      0.510        0.764\n 6 Boozman    B001236  AR    R           129 0.915      0.851       26.9  \n 7 Blackburn  B001243  TN    R           131 0.885      0.889       26.0  \n 8 Barrasso   B001261  WY    R           129 0.891      0.895       46.3  \n 9 Bennet     B001267  CO    D           121 0.273      0.417       -4.91 \n10 Blumenthal B001277  CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\nNotice that all these commands have not edited our existent objects—they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (&lt;-). For example:\n\ntrump_scores_reduced &lt;- trump_scores |&gt; \n  select(last_name, matches(\"agree\"))\n\n\ntrump_scores_reduced\n\n# A tibble: 122 × 3\n   last_name  agree agree_pred\n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;\n 1 Alexander  0.890      0.856\n 2 Blunt      0.906      0.787\n 3 Brown      0.258      0.642\n 4 Burr       0.893      0.560\n 5 Baldwin    0.227      0.510\n 6 Boozman    0.915      0.851\n 7 Blackburn  0.885      0.889\n 8 Barrasso   0.891      0.895\n 9 Bennet     0.273      0.417\n10 Blumenthal 0.203      0.294\n# ℹ 112 more rows\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nSelect the variables last_name, party, num_votes, and agree from the data frame. Your code:\n\n\n\n\n2.2.2 Renaming columns\nWe can use the rename() function to rename columns, with the syntax new_name = old_name. For example:\n\ntrump_scores |&gt; \n  rename(prop_agree = agree, prop_agree_pred = agree_pred)\n\n# A tibble: 122 × 8\n   bioguide last_name  state party num_votes prop_agree prop_agree_pred\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;\n 1 A000360  Alexander  TN    R           118      0.890           0.856\n 2 B000575  Blunt      MO    R           128      0.906           0.787\n 3 B000944  Brown      OH    D           128      0.258           0.642\n 4 B001135  Burr       NC    R           121      0.893           0.560\n 5 B001230  Baldwin    WI    D           128      0.227           0.510\n 6 B001236  Boozman    AR    R           129      0.915           0.851\n 7 B001243  Blackburn  TN    R           131      0.885           0.889\n 8 B001261  Barrasso   WY    R           129      0.891           0.895\n 9 B001267  Bennet     CO    D           121      0.273           0.417\n10 B001277  Blumenthal CT    D           128      0.203           0.294\n# ℹ 112 more rows\n# ℹ 1 more variable: margin_trump &lt;dbl&gt;\n\n\nThis is a good occasion to show how pipes allow us to chain operations. How do we read the following code out loud? (Remember that pipes are read as “then”).\n\ntrump_scores |&gt; \n  select(last_name, matches(\"agree\")) |&gt; \n  rename(prop_agree = agree, prop_agree_pred = agree_pred)\n\n# A tibble: 122 × 3\n   last_name  prop_agree prop_agree_pred\n   &lt;chr&gt;           &lt;dbl&gt;           &lt;dbl&gt;\n 1 Alexander       0.890           0.856\n 2 Blunt           0.906           0.787\n 3 Brown           0.258           0.642\n 4 Burr            0.893           0.560\n 5 Baldwin         0.227           0.510\n 6 Boozman         0.915           0.851\n 7 Blackburn       0.885           0.889\n 8 Barrasso        0.891           0.895\n 9 Bennet          0.273           0.417\n10 Blumenthal      0.203           0.294\n# ℹ 112 more rows\n\n\n\n\n2.2.3 Creating columns\nIt is common to want to create columns, based on existing ones. We can use mutate() to do so. For example, we could want our main variables of interest in terms of percentages instead of proportions:\n\ntrump_scores |&gt; \n  select(last_name, agree, agree_pred) |&gt; # select just for clarity\n  mutate(pct_agree = 100 * agree,\n         pct_agree_pred = 100 * agree_pred)\n\n# A tibble: 122 × 5\n   last_name  agree agree_pred pct_agree pct_agree_pred\n   &lt;chr&gt;      &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;          &lt;dbl&gt;\n 1 Alexander  0.890      0.856      89.0           85.6\n 2 Blunt      0.906      0.787      90.6           78.7\n 3 Brown      0.258      0.642      25.8           64.2\n 4 Burr       0.893      0.560      89.3           56.0\n 5 Baldwin    0.227      0.510      22.7           51.0\n 6 Boozman    0.915      0.851      91.5           85.1\n 7 Blackburn  0.885      0.889      88.5           88.9\n 8 Barrasso   0.891      0.895      89.1           89.5\n 9 Bennet     0.273      0.417      27.3           41.7\n10 Blumenthal 0.203      0.294      20.3           29.4\n# ℹ 112 more rows\n\n\nWe can also use multiple columns for creating a new one. For example, let’s retrieve the total number of votes in which the senator agreed with Trump:\n\ntrump_scores |&gt; \n  select(last_name, num_votes, agree) |&gt; # select just for clarity\n  mutate(num_votes_agree = num_votes * agree)\n\n# A tibble: 122 × 4\n   last_name  num_votes agree num_votes_agree\n   &lt;chr&gt;          &lt;dbl&gt; &lt;dbl&gt;           &lt;dbl&gt;\n 1 Alexander        118 0.890           105  \n 2 Blunt            128 0.906           116  \n 3 Brown            128 0.258            33  \n 4 Burr             121 0.893           108  \n 5 Baldwin          128 0.227            29  \n 6 Boozman          129 0.915           118  \n 7 Blackburn        131 0.885           116  \n 8 Barrasso         129 0.891           115  \n 9 Bennet           121 0.273            33.0\n10 Blumenthal       128 0.203            26  \n# ℹ 112 more rows\n\n\n\n\n2.2.4 Filtering rows\nAnother common operation is to filter rows based on logical conditions. We can do so with the filter() function. For example, we can filter to only get Democrats:\n\ntrump_scores |&gt; \n  filter(party == \"D\")\n\n# A tibble: 55 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 B000944  Brown      OH    D           128 0.258      0.642        8.13 \n 2 B001230  Baldwin    WI    D           128 0.227      0.510        0.764\n 3 B001267  Bennet     CO    D           121 0.273      0.417       -4.91 \n 4 B001277  Blumenthal CT    D           128 0.203      0.294      -13.6  \n 5 B001288  Booker     NJ    D           119 0.160      0.290      -14.1  \n 6 C000127  Cantwell   WA    D           128 0.242      0.276      -15.5  \n 7 C000141  Cardin     MD    D           128 0.25       0.209      -26.4  \n 8 C000174  Carper     DE    D           129 0.295      0.318      -11.4  \n 9 C001070  Casey      PA    D           129 0.287      0.508        0.724\n10 C001088  Coons      DE    D           128 0.289      0.319      -11.4  \n# ℹ 45 more rows\n\n\nNotice that == here is a logical operator, read as “is equal to.” So our full chain of operations says the following: take trump_scores, then filter it to get rows where party is equal to “D”.\nThere are other logical operators:\n\n\n\nLogical operator\nMeaning\n\n\n\n\n==\n“is equal to”\n\n\n!=\n“is not equal to”\n\n\n&gt;\n“is greater than”\n\n\n&lt;\n“is less than”\n\n\n&gt;=\n“is greater than or equal to”\n\n\n&lt;=\n“is less than or equal to”\n\n\n%in%\n“is contained in”\n\n\n&\n“and” (intersection)\n\n\n|\n“or” (union)\n\n\n\nLet’s see a couple of other examples.\n\ntrump_scores |&gt; \n  filter(agree &gt; 0.5)\n\n# A tibble: 69 × 8\n   bioguide last_name state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 A000360  Alexander TN    R           118 0.890      0.856        26.0 \n 2 B000575  Blunt     MO    R           128 0.906      0.787        18.6 \n 3 B001135  Burr      NC    R           121 0.893      0.560         3.66\n 4 B001236  Boozman   AR    R           129 0.915      0.851        26.9 \n 5 B001243  Blackburn TN    R           131 0.885      0.889        26.0 \n 6 B001261  Barrasso  WY    R           129 0.891      0.895        46.3 \n 7 B001310  Braun     IN    R            44 0.909      0.713        19.2 \n 8 C000567  Cochran   MS    R            68 0.971      0.830        17.8 \n 9 C000880  Crapo     ID    R           125 0.904      0.870        31.8 \n10 C001035  Collins   ME    R           129 0.651      0.441        -2.96\n# ℹ 59 more rows\n\n\n\ntrump_scores |&gt; \n  filter(state %in% c(\"CA\", \"TX\"))\n\n# A tibble: 4 × 8\n  bioguide last_name state party num_votes agree agree_pred margin_trump\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n1 C001056  Cornyn    TX    R           129 0.922      0.659         9.00\n2 C001098  Cruz      TX    R           126 0.921      0.663         9.00\n3 F000062  Feinstein CA    D           128 0.242      0.201       -30.1 \n4 H001075  Harris    CA    D           116 0.164      0.209       -30.1 \n\n\n\ntrump_scores |&gt; \n  filter(state == \"WV\" & party == \"D\")\n\n# A tibble: 1 × 8\n  bioguide last_name state party num_votes agree agree_pred margin_trump\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n1 M001183  Manchin   WV    D           129 0.504      0.893         42.2\n\n\n\n\n\n\n\n\nExercise\n\n\n\n\nAdd a new column to the data frame, called diff_agree, which subtracts agree and agree_pred. How would you create abs_diff_agree, defined as the absolute value of diff_agree? Your code:\nFilter the data frame to only get senators for which we have information on fewer than (or equal to) five votes. Your code:\nFilter the data frame to only get Democrats who agreed with Trump in at least 30% of votes. Your code:\n\n\n\n\n\n2.2.5 Ordering rows\nThe arrange() function allows us to order rows according to values. For example, let’s order based on the agree variable:\n\ntrump_scores |&gt; \n  arrange(agree)\n\n# A tibble: 122 × 8\n   bioguide last_name    state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 H000273  Hickenlooper CO    D             2 0         0.0302        -4.91\n 2 H000601  Hagerty      TN    R             2 0         0.115         26.0 \n 3 L000570  Luján        NM    D           186 0.124     0.243         -8.21\n 4 G000555  Gillibrand   NY    D           121 0.124     0.242        -22.5 \n 5 M001176  Merkley      OR    D           129 0.155     0.323        -11.0 \n 6 W000817  Warren       MA    D           116 0.155     0.216        -27.2 \n 7 B001288  Booker       NJ    D           119 0.160     0.290        -14.1 \n 8 S000033  Sanders      VT    D           112 0.161     0.221        -26.4 \n 9 H001075  Harris       CA    D           116 0.164     0.209        -30.1 \n10 M000133  Markey       MA    D           127 0.165     0.213        -27.2 \n# ℹ 112 more rows\n\n\nMaybe we only want senators with more than a few data points. Remember that we can chain operations:\n\ntrump_scores |&gt; \n  filter(num_votes &gt;= 10) |&gt; \n  arrange(agree)\n\n# A tibble: 115 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 L000570  Luján      NM    D           186 0.124      0.243        -8.21\n 2 G000555  Gillibrand NY    D           121 0.124      0.242       -22.5 \n 3 M001176  Merkley    OR    D           129 0.155      0.323       -11.0 \n 4 W000817  Warren     MA    D           116 0.155      0.216       -27.2 \n 5 B001288  Booker     NJ    D           119 0.160      0.290       -14.1 \n 6 S000033  Sanders    VT    D           112 0.161      0.221       -26.4 \n 7 H001075  Harris     CA    D           116 0.164      0.209       -30.1 \n 8 M000133  Markey     MA    D           127 0.165      0.213       -27.2 \n 9 W000779  Wyden      OR    D           129 0.186      0.323       -11.0 \n10 B001277  Blumenthal CT    D           128 0.203      0.294       -13.6 \n# ℹ 105 more rows\n\n\nBy default, arrange() uses increasing order (like sort()). To use decreasing order, add a minus sign:\n\ntrump_scores |&gt; \n  filter(num_votes &gt;= 10) |&gt; \n  arrange(-agree)\n\n# A tibble: 115 × 8\n   bioguide last_name state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 M001198  Marshall  KS    R           183 0.973      0.933        20.6 \n 2 C000567  Cochran   MS    R            68 0.971      0.830        17.8 \n 3 H000338  Hatch     UT    R            84 0.964      0.825        18.1 \n 4 M001197  McSally   AZ    R           136 0.949      0.562         3.55\n 5 P000612  Perdue    GA    R           119 0.941      0.606         5.16\n 6 C001096  Cramer    ND    R           135 0.941      0.908        35.7 \n 7 R000307  Roberts   KS    R           127 0.937      0.818        20.6 \n 8 C001056  Cornyn    TX    R           129 0.922      0.659         9.00\n 9 H001061  Hoeven    ND    R           129 0.922      0.883        35.7 \n10 C001047  Capito    WV    R           127 0.921      0.896        42.2 \n# ℹ 105 more rows\n\n\nYou can also order rows by more than one variable. What this does is to order by the first variable, and resolve any ties by ordering by the second variable (and so forth if you have more than two ordering variables). For example, let’s first order our data frame by party, and then within party order by agreement with Trump:\n\ntrump_scores |&gt; \n  filter(num_votes &gt;= 10) |&gt; \n  arrange(party, agree)\n\n# A tibble: 115 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;        &lt;dbl&gt;\n 1 L000570  Luján      NM    D           186 0.124      0.243        -8.21\n 2 G000555  Gillibrand NY    D           121 0.124      0.242       -22.5 \n 3 M001176  Merkley    OR    D           129 0.155      0.323       -11.0 \n 4 W000817  Warren     MA    D           116 0.155      0.216       -27.2 \n 5 B001288  Booker     NJ    D           119 0.160      0.290       -14.1 \n 6 S000033  Sanders    VT    D           112 0.161      0.221       -26.4 \n 7 H001075  Harris     CA    D           116 0.164      0.209       -30.1 \n 8 M000133  Markey     MA    D           127 0.165      0.213       -27.2 \n 9 W000779  Wyden      OR    D           129 0.186      0.323       -11.0 \n10 B001277  Blumenthal CT    D           128 0.203      0.294       -13.6 \n# ℹ 105 more rows\n\n\n\n\n\n\n\n\nExercise\n\n\n\nArrange the data by diff_pred, the difference between agreement and predicted agreement with Trump. (You should have code on how to create this variable from the last exercise). Your code:\n\n\n\n\n2.2.6 Summarizing data\ndplyr makes summarizing data a breeze using the summarize() function:\n\ntrump_scores |&gt; \n  summarize(mean_agree = mean(agree),\n            mean_agree_pred = mean(agree_pred))\n\n# A tibble: 1 × 2\n  mean_agree mean_agree_pred\n       &lt;dbl&gt;           &lt;dbl&gt;\n1      0.592           0.572\n\n\nTo make summaries, we can use any function that takes a vector and returns one value. Another example:\n\ntrump_scores |&gt; \n  filter(num_votes &gt;= 5) |&gt; # to filter out senators with few data points\n  summarize(max_agree = max(agree),\n            min_agree = min(agree))\n\n# A tibble: 1 × 2\n  max_agree min_agree\n      &lt;dbl&gt;     &lt;dbl&gt;\n1         1     0.124\n\n\nGrouped summaries allow us to disaggregate summaries according to other variables (usually categorical):\n\ntrump_scores |&gt; \n  filter(num_votes &gt;= 5) |&gt; # to filter out senators with few data points\n  summarize(mean_agree = mean(agree),\n            max_agree = max(agree),\n            min_agree = min(agree),\n            .by = party) # to group by party\n\n# A tibble: 2 × 4\n  party mean_agree max_agree min_agree\n  &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 R          0.876     1         0.651\n2 D          0.272     0.548     0.124\n\n\n\n\n\n\n\n\nExercise\n\n\n\nObtain the maximum absolute difference in agreement with Trump (the abs_diff_agree variable from before) for each party.\n\n\n\n\n2.2.7 Overview\n\n\n\nFunction\nPurpose\n\n\n\n\nselect()\nSelect columns\n\n\nrename()\nRename columns\n\n\nmutate()\nCreating columns\n\n\nfilter()\nFiltering rows\n\n\narrange()\nOrdering rows\n\n\nsummarize()\nSummarizing data\n\n\nsummarize(…, .by = )\nSummarizing data (by groups)",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tidy data analysis I</span>"
    ]
  },
  {
    "objectID": "02_tidy_data1.html#visualizing-data-with-ggplot2",
    "href": "02_tidy_data1.html#visualizing-data-with-ggplot2",
    "title": "2  Tidy data analysis I",
    "section": "2.3 Visualizing data with ggplot2",
    "text": "2.3 Visualizing data with ggplot2\nggplot2 is the package in charge of data visualization in the tidyverse. It is extremely flexible and allows us to draw bar plots, box plots, histograms, scatter plots, and many other types of plots (see examples at R Charts).\nThroughout this module we will use a subset of our data frame, which only includes senators with more than a few data points:\n\ntrump_scores_ss &lt;- trump_scores |&gt; \n  filter(num_votes &gt;= 10)\n\nThe ggplot2 syntax provides a unifying interface (the “grammar of graphics” or “gg”) for drawing all different types of plots. One draws plots by adding different “layers,” and the core code always includes the following:\n\nA ggplot() command with a data = argument specifying a data frame and a mapping = aes() argument specifying “aesthetic mappings,” i.e., how we want to use the columns in the data frame in the plot (for example, in the x-axis, as color, etc.).\n“geoms,” such as geom_bar() or geom_point(), specifying what to draw on the plot.\n\nSo all ggplot2 commands will have at least three elements: data, aesthetic mappings, and geoms.\n\n2.3.1 Univariate plots: categorical\nLet’s see an example of a bar plot with a categorical variable:\n\nggplot(data = trump_scores_ss, mapping = aes(x = party)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nAs with any other function, we can drop the argument names if we specify the argument values in order. This is common in ggplot2 code:\n\nggplot(trump_scores_ss, aes(x = party)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\nNotice how geom_bar() automatically computes the number of observations in each category for us. Sometimes we want to use numbers in our data frame as part of a bar plot. Here we can use the geom_col() geom specifying both x and y aesthetic mappings, in which is sometimes called a “column plot:”\n\nggplot(trump_scores_ss |&gt; filter(state == \"ME\"),\n       aes(x = last_name, y = agree)) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nDraw a column plot with the agreement with Trump of Bernie Sanders and Ted Cruz. What happens if you use last_name as the y aesthetic mapping and agree in the x aesthetic mapping? Your code:\n\n\nA common use of geom_col() is to create “ranking plots.” For example, who are the senators with highest agreement with Trump? We can start with something like this:\n\nggplot(trump_scores_ss,\n       aes(x = agree, y = last_name)) +\n  geom_col()\n\n\n\n\n\n\n\n\nWe might want to (1) select the top 10 observations and (2) order the bars according to the agree values. We can do these operations with slice_max() and fct_reorder(), as shown below:\n\nggplot(trump_scores_ss |&gt; slice_max(agree, n = 10),\n       aes(x = agree, y = fct_reorder(last_name, agree))) +\n  geom_col()\n\n\n\n\n\n\n\n\nWe can also plot the senators with the lowest agreement with Trump using slice_min() and fct_reorder() with a minus sign in the ordering variable:\n\nggplot(trump_scores_ss |&gt; slice_min(agree, n = 10),\n       aes(x = agree, y = fct_reorder(last_name, -agree))) +\n  geom_col()\n\n\n\n\n\n\n\n\n\n\n2.3.2 Univariate plots: numerical\nWe can draw a histogram with geom_histogram():\n\nggplot(trump_scores_ss, aes(x = agree)) +\n  geom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\n\n\n\nNotice the warning message above. It’s telling us that, by default, geom_histogram() will draw 30 bins. Sometimes we want to modify this behavior. The following code has some common options for geom_histogram() and their explanations:\n\nggplot(trump_scores_ss, aes(x = agree)) +\n  geom_histogram(binwidth = 0.05,   # draw bins every 0.05 jumps in x\n                 boundary = 0,      # don't shift bins to integers\n                 closed   = \"left\") # close bins on the left\n\n\n\n\n\n\n\n\nSometimes we want to manually alter a scale. This is accomplished with the scale_*() family of ggplot2 functions. Here we use the scale_x_continuous() function to make the x-axis go from 0 to 1:\n\nggplot(trump_scores_ss, aes(x = agree)) +\n  geom_histogram(binwidth = 0.05, boundary = 0, closed   = \"left\") +   \n  scale_x_continuous(limits = c(0, 1))\n\n\n\n\n\n\n\n\nAdding the fill aesthetic mapping to a histogram will divide it according to a categorical variable. This is actually a bivariate plot!\n\nggplot(trump_scores_ss, aes(x = agree, fill = party)) +\n  geom_histogram(binwidth = 0.05, boundary = 0, closed   = \"left\") +   \n  scale_x_continuous(limits = c(0, 1)) +\n  # change default colors:\n  scale_fill_manual(values = c(\"D\" = \"blue\", \"R\" = \"red\"))\n\n\n\n\n\n\n\n\n\n\n2.3.3 Bivariate plots\nAnother common bivariate plot for categorical and numerical variables is the grouped box plot:\n\nggplot(trump_scores_ss, aes(x = agree, y = party)) +\n  geom_boxplot() +\n  scale_x_continuous(limits = c(0, 1)) # same change as before\n\n\n\n\n\n\n\n\nFor bivariate plots of numerical variables, scatter plots are made with geom_point():\n\nggplot(trump_scores_ss, aes(x = margin_trump, y = agree)) +\n  geom_point()\n\n\n\n\n\n\n\n\nWe can add the color aesthetic mapping to add a third variable:\n\nggplot(trump_scores_ss, aes(x = margin_trump, y = agree, color = party)) +\n  geom_point() +\n  scale_color_manual(values = c(\"D\" = \"blue\", \"R\" = \"red\"))\n\n\n\n\n\n\n\n\nLet’s finish our plot with the labs() function, which allows us to add labels to our aesthetic mappings, as well as titles and notes:\n\nggplot(trump_scores, aes(x = margin_trump, y = agree, color = party)) +\n  geom_point() +\n  scale_color_manual(values = c(\"D\" = \"blue\", \"R\" = \"red\")) +\n  labs(x = \"Trump margin in the senator's state (p.p.)\",\n       y = \"Votes in agreement with Trump (prop.)\",\n       color = \"Party\",\n       title = \"Relationship between Trump margins and senators' votes\",\n       caption = \"Data source: FiveThirtyEight (2021)\")\n\n\n\n\n\n\n\n\nWe will review a few more customization options, including text labels and facets, in a subsequent module.\n\n\n\n\nArel-Bundock, Vincent, Nils Enevoldsen, and CJ Yetman. 2018. “Countrycode: An r Package to Convert Country Names and Country Codes.” Journal of Open Source Software 3 (28): 848. https://doi.org/10.21105/joss.00848.\n\n\nAronow, Peter M, and Benjamin T Miller. 2019. Foundations of Agnostic Statistics. Cambridge University Press.\n\n\nBank, World. 2023. “World Bank Open Data.” https://data.worldbank.org/.\n\n\nBaydin, Atılım Günes, Barak A. Pearlmutter, Alexey Andreyevich Radul, and Jeffrey Mark Siskind. 2017. “Automatic Differentiation in Machine Learning: A Survey.” The Journal of Machine Learning Research 18 (1): 5595–5637.\n\n\nCoppedge, Michael, John Gerring, Carl Henrik Knutsen, Staffan I. Lindberg, Jan Teorell, David Altman, Michael Bernhard, et al. 2022. “V-Dem Codebook V12.” Varieties of Democracy (V-Dem) Project. https://www.v-dem.net/dsarchive.html.\n\n\nDahlberg, Stefan, Aksen Sundström, Sören Holmberg, Bo Rothstein, Natalia Alvarado Pachon, Cem Mert Dalli, and Yente Meijers. 2023. “The Quality of Government Basic Dataset, Version Jan23.” University of Gothenburg: The Quality of Government Institute. https://www.gu.se/en/quality-government doi:10.18157/qogbasjan23.\n\n\nFiveThirtyEight. 2021. “Tracking Congress In The Age Of Trump [Dataset].” https://projects.fivethirtyeight.com/congress-trump-score/.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social Science: An Introduction in Tidyverse. Princeton; Oxford: Princeton University Press.\n\n\nMoore, Will H., and David A. Siegel. 2013. A Mathematics Course for Political and Social Research. Princeton, NJ: Princeton University Pres.\n\n\nPontin, Jason. 2007. “Oppenheimer’s Ghost.” MIT Technology Review, October 15, 2007. https://www.technologyreview.com/2007/10/15/223531/oppenheimers-ghost-3/.\n\n\nRobinson, David. 2020. Fuzzyjoin: Join Tables Together on Inexact Matching. https://github.com/dgrtwo/fuzzyjoin.\n\n\nRossi, Hugo. 1996. “Mathematics Is an Edifice, Not a Toolbox.” Notices of the AMS 43 (10): 1108.\n\n\nSmith, Danny. 2020. Survey Research Datasets and R. https://socialresearchcentre.github.io/r_survey_datasets/.\n\n\nU. S. Department of Agriculture [USDA], Agricultural Research Service. 2019. “Department of Agriculture Agricultural Research Service.” https://fdc.nal.usda.gov/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of Statistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\nWickham, Hadley, Danielle Navarro, and Thomas Lin Pedersen. 2023. Ggplot2: Elegant Graphics for Data Analysis. 3rd ed. https://ggplot2-book.org/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tidy data analysis I</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Arel-Bundock, Vincent, Nils Enevoldsen, and CJ Yetman. 2018.\n“Countrycode: An r Package to Convert Country Names and Country\nCodes.” Journal of Open Source Software 3 (28): 848. https://doi.org/10.21105/joss.00848.\n\n\nAronow, Peter M, and Benjamin T Miller. 2019. Foundations of\nAgnostic Statistics. Cambridge University Press.\n\n\nBank, World. 2023. “World Bank Open Data.” https://data.worldbank.org/.\n\n\nBaydin, Atılım Günes, Barak A. Pearlmutter, Alexey Andreyevich Radul,\nand Jeffrey Mark Siskind. 2017. “Automatic Differentiation in\nMachine Learning: A Survey.” The Journal of Machine Learning\nResearch 18 (1): 5595–5637.\n\n\nCoppedge, Michael, John Gerring, Carl Henrik Knutsen, Staffan I.\nLindberg, Jan Teorell, David Altman, Michael Bernhard, et al. 2022.\n“V-Dem Codebook V12.” Varieties of Democracy (V-Dem)\nProject. https://www.v-dem.net/dsarchive.html.\n\n\nDahlberg, Stefan, Aksen Sundström, Sören Holmberg, Bo Rothstein, Natalia\nAlvarado Pachon, Cem Mert Dalli, and Yente Meijers. 2023. “The\nQuality of Government Basic Dataset, Version Jan23.” University\nof Gothenburg: The Quality of Government Institute. https://www.gu.se/en/quality-government\ndoi:10.18157/qogbasjan23.\n\n\nFiveThirtyEight. 2021. “Tracking Congress\nIn The Age Of\nTrump [Dataset].” https://projects.fivethirtyeight.com/congress-trump-score/.\n\n\nImai, Kosuke, and Nora Webb Williams. 2022. Quantitative Social\nScience: An Introduction in Tidyverse. Princeton; Oxford: Princeton\nUniversity Press.\n\n\nMoore, Will H., and David A. Siegel. 2013. A Mathematics Course for\nPolitical and Social Research. Princeton, NJ: Princeton University\nPres.\n\n\nPontin, Jason. 2007. “Oppenheimer’s Ghost.”\nMIT Technology Review, October 15, 2007. https://www.technologyreview.com/2007/10/15/223531/oppenheimers-ghost-3/.\n\n\nRobinson, David. 2020. Fuzzyjoin: Join Tables Together on Inexact\nMatching. https://github.com/dgrtwo/fuzzyjoin.\n\n\nRossi, Hugo. 1996. “Mathematics Is an Edifice, Not a\nToolbox.” Notices of the AMS 43 (10): 1108.\n\n\nSmith, Danny. 2020. Survey Research Datasets and\nR. https://socialresearchcentre.github.io/r_survey_datasets/.\n\n\nU. S. Department of Agriculture [USDA], Agricultural Research Service.\n2019. “Department of Agriculture Agricultural Research\nService.” https://fdc.nal.usda.gov/.\n\n\nWickham, Hadley. 2014. “Tidy Data.” Journal of\nStatistical Software 59 (10). https://doi.org/10.18637/jss.v059.i10.\n\n\nWickham, Hadley, Danielle Navarro, and Thomas Lin Pedersen. 2023.\nGgplot2: Elegant Graphics for\nData Analysis. 3rd ed. https://ggplot2-book.org/.",
    "crumbs": [
      "References"
    ]
  }
]
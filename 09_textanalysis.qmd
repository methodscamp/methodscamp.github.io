# Text analysis

## Strings

-   In R, a piece of text is represented as a sequence of characters (letters, numbers, and symbols).

-   A string is a sequence of characters, which is used for storing text.

    -   For example, "methods" is a string that includes characters: m, e, t, h, o, d, s.

-   Creating strings is very straightforward in RStudio. We assign character values to a variable, being sure to enclose the character values (the text) in double or single quotation marks.

    -   We can create strings of single words, or whole sentences if we so wish.

```{r}
string1 <- "camp" 
string1

string2 <- "I love methods camps."
string2
```

-   We can also create a vector of strings.

```{r}
string3 <- c("I", "love", "methods", "camp", ".")
string3
```

## String manipulation

-   Often, strings, and more broadly text, contain information that we want to extract for the purpose of our research.
    -   For example, perhaps we wanted to count the number of times a certain country was mentioned during the U.S. President's annual State of the Union Address.
-   For tasks such as these, we can use regular expressions (also known as 'regex'), which search for one or more specified pattern of characters.
    -   These patterns can be exact matches, or more general.

```{r}
test <- "test"
```

-   Regular expressions can be used to:
    -   Extract information from text.
    -   Parsing text.
    -   Cleaning/replacing strings.

::: callout-important
Fortunately, the syntax for regular expressions is relatively stable across all programming languages (e.g., Java, Python, R).
:::

### Regular expression basics

-   Anchors: \^ and

## Stringr

-   To install `"stringr"` use the function `install.packages()`. Then, load it to your current session with `library()`:

```{r}
# installing 'stringr'
install.packages("stringr")

# load 'stringr'
library(stringr)
```

-   `stringr` provides functions for both (a) basic string manipulations and (b) regular expression operations. Some basic functions are listed below:

|  **Function**  |             **Description**             |
|:--------------:|:---------------------------------------:|
|   `str_c()`    |          string concatenation           |
| `str_length()` |          number of characters           |
|  `str_sub()`   |           extracts substrings           |
|  `str_dup()`   |          duplicates characters          |
|  `str_trim()`  | removes leading and trailing whitespace |
|  `str_pad()`   |              pads a string              |
|  `str_wrap()`  |        wraps a string paragraph         |
|  `str_trim()`  |             trims a string              |

## Simple text analysis

### Counts

### tf-idf

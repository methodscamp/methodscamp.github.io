# Functions and loops

## Basics

### What is a function?

-   A function, in layman's terms, is anything that takes input(s) and gives one defined output.

-   There are always three main parts:

    -   The input ($x$ values, or each value in the domain)
    -   The relationship of interest
    -   The output ($y$ values, or a unique value in the range)

::: callout-note
"$f(x) = \space ...$ is the classic notation for writing a function, but we can also use"$y = \space ...$". This is because $y$ is"a function of" $x$, so $y=f(x)$.
:::

-   Let's take a look at an example and break down the structure:

$$f(x) = 3x + 4$$

-   $x$ is the *input* (some value) that the function takes.

-   For any $x$, we multiply by three and add 4, which is the *relationship*.

-   Finally, $f(x)$ or $y$ is the unique result, or the *output*.

### Function machine

![](images/function_machine.jpg){#fig-function-machine fig-align="center"}

-   The most common name to give a function is, predictably, "$f$", but we can have other names such as "$g$" or "$h$". The choice is yours.

::: callout-important
When referring to functions, we say "\[name of function\] of x equals \[relationship\]. For example, $f(x) = x^2$ is referred to as"f of x equals x squared."
:::

### Vertical line test

-   Functions are *single-valued*, meaning that it will not produce two or more results for the same input.

::: callout-warning
Two distinct inputs may have the same output ("many-to-one") âœ… . That is not a problem. A function, however, cannot have one input with more than one output ("one-to-many") ðŸš« .
:::

-   The easiest visual test to test whether something is a function is known as the **vertical line test**.

    -   This means that no vertical line ever crosses more than one value on a graph. It it does, we do not have a function.

![](images/function_notfunction.jpg)

## Types of functions

### Linear functions

-   Linear functions are those whose graph is a straight line.

-   The form of a linear function is very familiar:

$$y=mx+b$$

-   Let's break down the structure:

    -   $m$ is the slope, or the coefficient of the independent variable (for every one unit increase in $x$, $y$ increases $m$ units).
    -   $b$ is the y intercept, or the constant term (the value of $y$ when $x=0$).

::: callout-note
Linear functions can also be expressed more generally as $y=a+bx$, where $a$ is the y intercept and $b$ is the slope.
:::

-   Below is a graph of the function $y = 3x + 4$:

```{r, echo=FALSE, fig.align='center'}
library(ggplot2)
lin_func <- ggplot (data.frame(x = c(-5, 5)), aes(x = x)) +
  stat_function(fun = function(x){3*x+4}, color="red", lwd = 1) 
lin_func
```

### Quadratic functions

-   These lines have one curve. $$y=ax^2 + bx + c$$

-   $a$, $b$, and $c$ don't have well-defined meanings here.

-   If $a$ is negative, the function opens downward; if $a$ is positive,it opens upward.

-   Note that $x^2$ always returns positive values.

-   Below is a graph of the function $y = x^2$:

```{r, echo=FALSE, fig.align='center'}
library(ggplot2)
quad_curve <- ggplot (data.frame(x = c(-5, 5)), aes(x = x)) +
  stat_function(fun = function(x){x^2}, color="blue", lwd = 1) 
quad_curve
```

### Cubic functions

-   These lines (generally) have two curves (inflection points).

-   $y=ax^3 + bx^2 + cx +d$

-   $a$, $b$, $c$, and $d$ don't have well-defined meanings here.

-   Below is a graph of the function $y = x^3$:

```{r, echo=FALSE, fig.align='center'}
cub_curve <- ggplot (data.frame(x = c(-5, 5)), aes(x = x)) +
  stat_function(fun = function(x){x^3}, color="green", lwd = 1) 
cub_curve
```

### Polynomial functions

$$y=ax^n + bx^{n-1} + ... + c$$

-   These functions have (maximum) $n-1$ changes in direction (turning points).

-   They also have (maximum) $n$ x-intercepts.

-   They can be made arbitrarily precise.

```{r, echo=FALSE, fig.align='center'}
poly_func <- ggplot (data.frame(x = c(-5, 5)), aes(x = x)) +
  stat_function(fun = function(x){x^2+2*x+1}, color="darkorchid", lwd = 1) 
poly_func
```

### Exponential functions

$$y = ab^{x}$$ or $$f(x)=ab^x$$

-   Here our independent variable, or input ($x$), is the exponent.

-   Below is a graph of the function $y = 2^x$:

```{r, echo=FALSE, fig.align='center'}
exp_func <- ggplot (data.frame(x = c(-5, 5)), aes(x = x)) +
  stat_function(fun = function(x){2^x}, color="darkorange1", lwd = 1) 
exp_func
```

## Creating functions in R

-   Each of the graphs above required me to define the corresponding function in RStudio.

-   Often we need to create our own function to automate a particular task, such as calculating the output of a function for a particular set of values.

-   To build our own functions, we use the keyword `function` alongside the following syntax:

    -   `function_name <- function(parameters){   function body  }`

-   `function_name`: the name of the function object that will be stored in the R environment after the function definition and used for calling that function. Make the name concise and memorable!

-   `function(parameters)`: the variable(s) in the function definition placed inside the parentheses (and separated with a comma if need be) that will be set to actual values (called arguments) each time we call the function.

-   `{function body}`: a set of commands that are run in a predefined order every time we call the function.

-   We define simple linear functions very easily:

```{r}
linear_func <- function(x){5*x + 13}
linear_func(5)
```

-   We can also automate more complicated tasks such as calculating the area of a circle:

```{r}
circle_area <- function(r){
    pi*r^2
}
circle_area(3)
```

-   We can even "nest" our functions, meaning that we can define a new function inside another function.

    -   For example, we can create a nested function that sums up the circle areas of 3 non-intersecting circles

```{r}
sum_circle_ares <- function(r1, r2, r3){
    circle_area <- function(r){
        pi*r^2
    }
    circle_area(r1) + circle_area(r2) + circle_area(r3)
}

print(sum_circle_ares(2, 4, 6))
```

-   User-defined functions have endless possibilities! We encourage you to get creative and try to automate new tasks when possible, especially if they are repetitive.

## Logarithms and exponents

### Logarithms

-   Logarithms are basically the opposite (inverse) of exponents.

-   They ask how many times you must raise the base to get $x$.

-   $log_a(b)=x$ is asking "a raised to what power x gives b?"

-   $\log_3(81) = 4$ because $3^4=81$

::: callout-warning
Logarithms can be *undefined*. The base cannot be 0, 1, or negative.
:::

### Relationships

If, $$ log_ax=b$$ then, $$a^{log_{a}x}=a^b$$ and $$x=a^b$$

### Basic rules

$$\dfrac{\log_x n}{\log_x m} = \log_m n$$

$$\log_x(ab) = \log_xa + \log_xb $$

$$\log_x\left(\frac{a}{b}\right) = \log_xa - \log_xb$$

$$\log_xa^b = b \log_x a$$

$$\log_x 1 = 0$$

$$log_{x}x=1$$

$$m^{\log_m(a)} = a$$

### Natural logarithms

-   We most often use natural logarithms for our purposes.

-   This means $log_e(x)$, which is usually written as $ln(x)$.

::: callout-important
$e \approx 2.7183$.
:::

-   $ln(x)$ and its exponent opposite, $e^x$, have nice properties when we perform calculus.

### Definition of e

-   Imagine you invest \$1 in a bank and receive 100% interest for one year, and the bank pays you back once a year: $$(1+1)^1= 2$$

-   When it pays you twice a year with compound interest:

$$(1+1/2)^2=2.25$$

-   If it pays you three times a year:

$$(1+1/3)^3=2.37...$$

-   What will happen when the bank pays you once a month? Once a day?

$$(1+\frac{1}{n})^{n}$$

-   However, there is limit to what you can get.

$$\lim_{n\to\infty} (1 + \dfrac{1}{n})^n = 2.7183... = e$$

-   For any interest rate $k$ and number of times the bank pays you $t$: $$\lim_{n\to\infty} (1 + \dfrac{k}{n})^{nt} = e^{kt}$$

-   $e$ is important for defining *exponential growth*. Since $ln(e^x) = x$, the natural logarithm helps us turn exponential functions into linear ones.

::: callout-note
## Exercise

Solve the problems below, simplifying as much as you can. $$log_{10}(1000)$$ $$log_2(\dfrac{8}{32})$$ $$10^{log_{10}(300)}$$ $$ln(1)$$ $$ln(e^2)$$ $$ln(5e)$$
:::

## Functions of functions

-   Functions can take other functions as arguments.

-   This means that outside function takes output of inside function as its input.

-   This is typically written as $f(g(x))$.

-   Say we have the exterior function f(x)=$x^2$ and the interior function g(x)=$x-3$.

-   Then if we want f(g(x)), we would subtract 3 from any input, and then square the result.

-   We write this $(x-3)^2$, NOT $x^2-3$.

## PMF, PDF, and CDF

-   Probability mass function (PMF)

    -   This gives the probability that a discrete random variable is exactly equal to some value.

-   Probability density function (PDF)

    -   This gives the probability that a continuous random variable falls within a particular range of values.

-   Cumulative distribution function (CDF)

    -   This gives the probability that a random variable X takes a value less than or equal to $x$.

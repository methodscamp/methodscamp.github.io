{
  "hash": "f603e54979821de398a3fbfb45d4fdc0",
  "result": {
    "markdown": "# Tidy data analysis II\n\nIn this session, we'll cover a few more advanced topics related to data wrangling. Again we'll use the `tidyverse`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n## Loading data in different formats.\n\nIn this module we will use cross-national data from the [Quality of Government (QoG) project](https://www.gu.se/en/quality-government/qog-data/data-downloads/basic-dataset) ([Dahlberg et al., 2023](https://www.gu.se/en/quality-government%20doi:10.18157/qogbasjan23)).\n\nNotice how in the `data/` folder we have multiple versions of the same dataset (a subset of the QOG basic dataset): .csv (comma-separated values), .rds (R), .xlsx (Excel), .dta (Stata), and .sav (SPSS).\n\n### CSV and R data files\n\nWe can use the `read_csv()` and `read_rds()` functions from the `tidyverse`[^04_tidy_data2-1] to read the .csv and .rds (R) data files:\n\n[^04_tidy_data2-1]: Technically, the `read_csv()` and `read_rds()` functions come from `readr`, one of the `tidyverse` constituent packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nqog_csv <- read_csv(\"data/qog_bas_cs_jan23.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 194 Columns: 351\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): cname, cname_qog, ccodealp, version\ndbl (347): ccode, ccode_qog, ccodecow, ajr_settmort, atop_ally, atop_number,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nqog_rds <- read_rds(\"data/qog_bas_cs_jan23.rds\")\n```\n:::\n\n\nFor reading files from other software (Excel, Stata, or SPSS), we need to load additional packages. Luckily, they are automatically installed when one installs the `tidyverse`.\n\n### Excel data files\n\nFor Excel files (.xls or .xlsx files), the `readxl` package has a handy `read_excel()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nqog_excel <- read_excel(\"data/qog_bas_cs_jan23.xlsx\")\n```\n:::\n\n\n::: callout-tip\nUseful arguments of the `read_excel()` function include `sheet =`, which reads particular sheets (specified via their positions or sheet names), and `range =`, which extracts a particular cell range (e.g., \\`A5:E25\\`).\n:::\n\n### Stata and SPSS data files\n\nTo load files from Stata (.dta) or SPSS (.spss), one needs the `haven` package and its properly-named `read_stata()` and `read_spss()` functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\nqog_stata <- read_stata(\"data/qog_bas_cs_jan23_stata14.dta\")\nqog_spss <- read_spss(\"data/qog_bas_cs_jan23.sav\")\n```\n:::\n\n\n::: callout-tip\nDatasets from Stata and SPSS can have additional properties, like variable labels and special types of missing values. To learn more about this, check out the [\"Labelled data\" chapter](https://socialresearchcentre.github.io/r_survey_datasets/labelled-data.html) from Danny Smith's *Survey Research Datasets and R* [(2020)](https://socialresearchcentre.github.io/r_survey_datasets/).\n:::\n\n## Pivoting data\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
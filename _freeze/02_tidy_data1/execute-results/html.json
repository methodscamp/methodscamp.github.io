{
  "hash": "d584901ecf9829a5502ca0aadc0cb453",
  "result": {
    "markdown": "# Tidy data analysis I\n\nThe [`tidyverse`](https://www.tidyverse.org/) is a suite of packages that streamline data analysis in R. After installing the `tidyverse` with `install.packages(\"tidyverse\")` (see the previous module), you can load it with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\nUpon loading, the `tidyverse` prints a message like the one above. Notice that multiple packages (the constituent elements of the \"suite\") are actually loaded. For instance, `dplyr` and `tidyr` help with data transformation and wrangling, while `ggplot2` allows us to draw plots. In most cases, one just loads the `tidyverse` and forgets about these details, as the constituent packages work together nicely.\n\n:::\n\nThroughout this module, we will use `tidyverse` functions to load, wrangle, and visualize real data. \n\n## Loading data\n\nThroughout this module we will work with a dataset of senators during the Trump presidency, which was adapted from [FiveThirtyEight (2021)](https://projects.fivethirtyeight.com/congress-trump-score/).\n\nWe have stored the dataset in .csv format under the `data/` subfolder. Loading it into R is simple (notice that we need to assign it to an object):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores <- read_csv(\"data/trump_scores_538.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 122 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): id_bioguide, last_name, state, party\ndbl (3): num_votes, agree_trump, margin_trump\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores # a \"tibble\" is a data frame in the tidyverse lingo\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 7\n   id_bioguide last_name  state party      num_votes agree_trump margin_trump\n   <chr>       <chr>      <chr> <chr>          <dbl>       <dbl>        <dbl>\n 1 A000360     Alexander  TN    Republican       118       0.890       26.0  \n 2 B000575     Blunt      MO    Republican       128       0.906       18.6  \n 3 B000944     Brown      OH    Democrat         128       0.258        8.13 \n 4 B001135     Burr       NC    Republican       121       0.893        3.66 \n 5 B001230     Baldwin    WI    Democrat         128       0.227        0.764\n 6 B001236     Boozman    AR    Republican       129       0.915       26.9  \n 7 B001243     Blackburn  TN    Republican       131       0.885       26.0  \n 8 B001261     Barrasso   WY    Republican       129       0.891       46.3  \n 9 B001267     Bennet     CO    Democrat         121       0.273       -4.91 \n10 B001277     Blumenthal CT    Democrat         128       0.203      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nLet's review the dataset's columns:\n\n- `id_bioguide`: A unique ID for each politician, from the Congress Bioguide.\n- `last_name`\n- `state`\n- `party`\n- `num_votes`: Number of votes for which data was available.\n- `agree_trump`: Proportion (0-1) of votes in which the senator voted in agreement with Trump.\n- `margin_trump`: Margin of victory (percentage points) of Trump in the senator's state.\n\nWe can inspect our data by using the interface above. An alternative is to run the command `View(trump_scores)` or click on the object in RStudio's environment panel (in the top-right section).\n\nDo you have any questions about the data?\n\n## Wrangling data with `dplyr`\n\nWe often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the `tidyverse`, these operations are conducted with multiple *verbs*, which we will review now. \n\n### Selecting columns\n\nWe can select specific columns in our dataset with the `select()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(trump_scores, last_name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 2\n   last_name  party     \n   <chr>      <chr>     \n 1 Alexander  Republican\n 2 Blunt      Republican\n 3 Brown      Democrat  \n 4 Burr       Republican\n 5 Baldwin    Democrat  \n 6 Boozman    Republican\n 7 Blackburn  Republican\n 8 Barrasso   Republican\n 9 Bennet     Democrat  \n10 Blumenthal Democrat  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nAll `dplyr` wrangling verbs take a data frame as their first argument. \n\nThis is a good moment to introduce the concept of \"pipes.\" Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (`|>`) \"kick\" the object on the left of the pipe to the first argument of the function on the right. One can read pipes as \"then,\" so the code below can be read as \"take `trump_scores`, then select the columns `last_name` and `party`.\" Pipes are very useful to *chain multiple operations*, as we will see in a moment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> select(last_name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 2\n   last_name  party     \n   <chr>      <chr>     \n 1 Alexander  Republican\n 2 Blunt      Republican\n 3 Brown      Democrat  \n 4 Burr       Republican\n 5 Baldwin    Democrat  \n 6 Boozman    Republican\n 7 Blackburn  Republican\n 8 Barrasso   Republican\n 9 Bennet     Democrat  \n10 Blumenthal Democrat  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\nYou can insert a pipe with the `Cmd/Ctrl + Shift + M` shortcut. If you have not changed the default RStudio settings, an \"old\" pipe (`%>%`) might appear. While most of the functionality is the same, the `|>` \"new\" pipes are more readable. You can change this RStudio option in `Tools > Global Options > Code > Use native pipe operator`. Make sure to check the other suggested settings in our [Setup module](/00_setup.html)!\n\n:::\n\n\nGoing back to selecting columns, you can select ranges:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> select(id_bioguide:party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 4\n   id_bioguide last_name  state party     \n   <chr>       <chr>      <chr> <chr>     \n 1 A000360     Alexander  TN    Republican\n 2 B000575     Blunt      MO    Republican\n 3 B000944     Brown      OH    Democrat  \n 4 B001135     Burr       NC    Republican\n 5 B001230     Baldwin    WI    Democrat  \n 6 B001236     Boozman    AR    Republican\n 7 B001243     Blackburn  TN    Republican\n 8 B001261     Barrasso   WY    Republican\n 9 B001267     Bennet     CO    Democrat  \n10 B001277     Blumenthal CT    Democrat  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nAnd use a few helper functions, like `matches()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> select(last_name, matches(\"trump\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  agree_trump margin_trump\n   <chr>            <dbl>        <dbl>\n 1 Alexander        0.890       26.0  \n 2 Blunt            0.906       18.6  \n 3 Brown            0.258        8.13 \n 4 Burr             0.893        3.66 \n 5 Baldwin          0.227        0.764\n 6 Boozman          0.915       26.9  \n 7 Blackburn        0.885       26.0  \n 8 Barrasso         0.891       46.3  \n 9 Bennet           0.273       -4.91 \n10 Blumenthal       0.203      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nOr `everything()`, which we usually use to reorder columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> select(last_name, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 7\n   last_name  id_bioguide state party      num_votes agree_trump margin_trump\n   <chr>      <chr>       <chr> <chr>          <dbl>       <dbl>        <dbl>\n 1 Alexander  A000360     TN    Republican       118       0.890       26.0  \n 2 Blunt      B000575     MO    Republican       128       0.906       18.6  \n 3 Brown      B000944     OH    Democrat         128       0.258        8.13 \n 4 Burr       B001135     NC    Republican       121       0.893        3.66 \n 5 Baldwin    B001230     WI    Democrat         128       0.227        0.764\n 6 Boozman    B001236     AR    Republican       129       0.915       26.9  \n 7 Blackburn  B001243     TN    Republican       131       0.885       26.0  \n 8 Barrasso   B001261     WY    Republican       129       0.891       46.3  \n 9 Bennet     B001267     CO    Democrat         121       0.273       -4.91 \n10 Blumenthal B001277     CT    Democrat         128       0.203      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n::: {.callout-tip}\n\nNotice that all these commands have not edited our existent objects---they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (`<-`). For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_reduced <- trump_scores |> select(last_name, matches(\"trump\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_reduced\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  agree_trump margin_trump\n   <chr>            <dbl>        <dbl>\n 1 Alexander        0.890       26.0  \n 2 Blunt            0.906       18.6  \n 3 Brown            0.258        8.13 \n 4 Burr             0.893        3.66 \n 5 Baldwin          0.227        0.764\n 6 Boozman          0.915       26.9  \n 7 Blackburn        0.885       26.0  \n 8 Barrasso         0.891       46.3  \n 9 Bennet           0.273       -4.91 \n10 Blumenthal       0.203      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n:::\n\n### Renaming columns\n\nWe can use the `rename()` function to rename columns, with the syntax `new_name = old_name`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> rename(prop_agree_trump = agree_trump)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 7\n   id_bioguide last_name  state party    num_votes prop_agree_trump margin_trump\n   <chr>       <chr>      <chr> <chr>        <dbl>            <dbl>        <dbl>\n 1 A000360     Alexander  TN    Republi…       118            0.890       26.0  \n 2 B000575     Blunt      MO    Republi…       128            0.906       18.6  \n 3 B000944     Brown      OH    Democrat       128            0.258        8.13 \n 4 B001135     Burr       NC    Republi…       121            0.893        3.66 \n 5 B001230     Baldwin    WI    Democrat       128            0.227        0.764\n 6 B001236     Boozman    AR    Republi…       129            0.915       26.9  \n 7 B001243     Blackburn  TN    Republi…       131            0.885       26.0  \n 8 B001261     Barrasso   WY    Republi…       129            0.891       46.3  \n 9 B001267     Bennet     CO    Democrat       121            0.273       -4.91 \n10 B001277     Blumenthal CT    Democrat       128            0.203      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nThis is a good occasion to show how pipes can chain operations. How do we read the following code out loud? (Remember that pipes are read as \"then\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, matches(\"trump\")) |> \n  rename(prop_agree_trump = agree_trump)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  prop_agree_trump margin_trump\n   <chr>                 <dbl>        <dbl>\n 1 Alexander             0.890       26.0  \n 2 Blunt                 0.906       18.6  \n 3 Brown                 0.258        8.13 \n 4 Burr                  0.893        3.66 \n 5 Baldwin               0.227        0.764\n 6 Boozman               0.915       26.9  \n 7 Blackburn             0.885       26.0  \n 8 Barrasso              0.891       46.3  \n 9 Bennet                0.273       -4.91 \n10 Blumenthal            0.203      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n### Creating columns\n\n### Filtering rows\n\n### Summarizing data\n\n### Overview\n\n## Visualizing data with `ggplot2`\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "f4113ca8db2591261bf630673b7c9307",
  "result": {
    "markdown": "# Tidy data analysis I\n\nThe [`tidyverse`](https://www.tidyverse.org/) is a suite of packages that streamline data analysis in R. After installing the `tidyverse` with `install.packages(\"tidyverse\")` (see the previous module), you can load it with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n::: callout-tip\nUpon loading, the `tidyverse` prints a message like the one above. Notice that multiple packages (the constituent elements of the \"suite\") are actually loaded. For instance, `dplyr` and `tidyr` help with data transformation and wrangling, while `ggplot2` allows us to draw plots. In most cases, one just loads the `tidyverse` and forgets about these details, as the constituent packages work together nicely.\n:::\n\nThroughout this module, we will use `tidyverse` functions to load, wrangle, and visualize real data.\n\n## Loading data\n\nThroughout this module we will work with a dataset of senators during the Trump presidency, which was adapted from [FiveThirtyEight (2021)](https://projects.fivethirtyeight.com/congress-trump-score/).\n\nWe have stored the dataset in .csv format under the `data/` subfolder. Loading it into R is simple (notice that we need to assign it to an object):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores <- read_csv(\"data/trump_scores_538.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 122 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): bioguide, last_name, state, party\ndbl (4): num_votes, agree, agree_pred, margin_trump\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>      <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 A000360  Alexander  TN    R           118 0.890      0.856       26.0  \n 2 B000575  Blunt      MO    R           128 0.906      0.787       18.6  \n 3 B000944  Brown      OH    D           128 0.258      0.642        8.13 \n 4 B001135  Burr       NC    R           121 0.893      0.560        3.66 \n 5 B001230  Baldwin    WI    D           128 0.227      0.510        0.764\n 6 B001236  Boozman    AR    R           129 0.915      0.851       26.9  \n 7 B001243  Blackburn  TN    R           131 0.885      0.889       26.0  \n 8 B001261  Barrasso   WY    R           129 0.891      0.895       46.3  \n 9 B001267  Bennet     CO    D           121 0.273      0.417       -4.91 \n10 B001277  Blumenthal CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nLet's review the dataset's columns:\n\n- `bioguide`: A unique ID for each politician, from the Congress Bioguide.\n- `last_name`\n- `state`\n- `party`\n- `num_votes`: Number of votes for which data was available.\n- `agree`: Proportion (0-1) of votes in which the senator voted in agreement with Trump.\n- `agree_pred`: Predicted proportion of vote agreement, calculated using Trump's margin (see next variable). \n- `margin_trump`: Margin of victory (percentage points) of Trump in the senator's state.\n\nWe can inspect our data by using the interface above. An alternative is to run the command `View(trump_scores)` or click on the object in RStudio's environment panel (in the top-right section).\n\nDo you have any questions about the data?\n\n## Wrangling data with `dplyr`\n\nWe often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the `tidyverse`, these operations are conducted with multiple *verbs*, which we will review now.\n\n### Selecting columns\n\nWe can select specific columns in our dataset with the `select()` function. All `dplyr` wrangling verbs take a data frame as their first argument---in this case, the columns we want to select are the other arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(trump_scores, last_name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 2\n   last_name  party\n   <chr>      <chr>\n 1 Alexander  R    \n 2 Blunt      R    \n 3 Brown      D    \n 4 Burr       R    \n 5 Baldwin    D    \n 6 Boozman    R    \n 7 Blackburn  R    \n 8 Barrasso   R    \n 9 Bennet     D    \n10 Blumenthal D    \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nThis is a good moment to talk about \"pipes.\" Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (`|>`) \"kick\" the object on the left of the pipe to the first argument of the function on the right. One can read pipes as \"then,\" so the code below can be read as \"take `trump_scores`, then select the columns `last_name` and `party`.\" Pipes are very useful to *chain multiple operations*, as we will see in a moment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 2\n   last_name  party\n   <chr>      <chr>\n 1 Alexander  R    \n 2 Blunt      R    \n 3 Brown      D    \n 4 Burr       R    \n 5 Baldwin    D    \n 6 Boozman    R    \n 7 Blackburn  R    \n 8 Barrasso   R    \n 9 Bennet     D    \n10 Blumenthal D    \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n::: callout-tip\nYou can insert a pipe with the `Cmd/Ctrl + Shift + M` shortcut. If you have not changed the default RStudio settings, an \"old\" pipe (`%>%`) might appear. While most of the functionality is the same, the `|>` \"new\" pipes are more readable. You can change this RStudio option in `Tools > Global Options > Code > Use native pipe operator`. Make sure to check the other suggested settings in our [Setup module](/00_setup.html)!\n:::\n\nGoing back to selecting columns, you can select ranges:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(bioguide:party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 4\n   bioguide last_name  state party\n   <chr>    <chr>      <chr> <chr>\n 1 A000360  Alexander  TN    R    \n 2 B000575  Blunt      MO    R    \n 3 B000944  Brown      OH    D    \n 4 B001135  Burr       NC    R    \n 5 B001230  Baldwin    WI    D    \n 6 B001236  Boozman    AR    R    \n 7 B001243  Blackburn  TN    R    \n 8 B001261  Barrasso   WY    R    \n 9 B001267  Bennet     CO    D    \n10 B001277  Blumenthal CT    D    \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nAnd use a few helper functions, like `matches()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, matches(\"agree\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  agree agree_pred\n   <chr>      <dbl>      <dbl>\n 1 Alexander  0.890      0.856\n 2 Blunt      0.906      0.787\n 3 Brown      0.258      0.642\n 4 Burr       0.893      0.560\n 5 Baldwin    0.227      0.510\n 6 Boozman    0.915      0.851\n 7 Blackburn  0.885      0.889\n 8 Barrasso   0.891      0.895\n 9 Bennet     0.273      0.417\n10 Blumenthal 0.203      0.294\n# ℹ 112 more rows\n```\n:::\n:::\n\n\nOr `everything()`, which we usually use to reorder columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   last_name  bioguide state party num_votes agree agree_pred margin_trump\n   <chr>      <chr>    <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 Alexander  A000360  TN    R           118 0.890      0.856       26.0  \n 2 Blunt      B000575  MO    R           128 0.906      0.787       18.6  \n 3 Brown      B000944  OH    D           128 0.258      0.642        8.13 \n 4 Burr       B001135  NC    R           121 0.893      0.560        3.66 \n 5 Baldwin    B001230  WI    D           128 0.227      0.510        0.764\n 6 Boozman    B001236  AR    R           129 0.915      0.851       26.9  \n 7 Blackburn  B001243  TN    R           131 0.885      0.889       26.0  \n 8 Barrasso   B001261  WY    R           129 0.891      0.895       46.3  \n 9 Bennet     B001267  CO    D           121 0.273      0.417       -4.91 \n10 Blumenthal B001277  CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n::: callout-tip\nNotice that all these commands have not edited our existent objects---they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (`<-`). For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_reduced <- trump_scores |> \n  select(last_name, matches(\"agree\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_reduced\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  agree agree_pred\n   <chr>      <dbl>      <dbl>\n 1 Alexander  0.890      0.856\n 2 Blunt      0.906      0.787\n 3 Brown      0.258      0.642\n 4 Burr       0.893      0.560\n 5 Baldwin    0.227      0.510\n 6 Boozman    0.915      0.851\n 7 Blackburn  0.885      0.889\n 8 Barrasso   0.891      0.895\n 9 Bennet     0.273      0.417\n10 Blumenthal 0.203      0.294\n# ℹ 112 more rows\n```\n:::\n:::\n\n:::\n\n::: callout-note\n## Exercise\n\nSelect the variables `last_name`, `party`, `num_votes`, and `agree` from the data frame. Your code:\n:::\n\n### Renaming columns\n\nWe can use the `rename()` function to rename columns, with the syntax `new_name = old_name`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  rename(prop_agree = agree, prop_agree_pred = agree_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   bioguide last_name  state party num_votes prop_agree prop_agree_pred\n   <chr>    <chr>      <chr> <chr>     <dbl>      <dbl>           <dbl>\n 1 A000360  Alexander  TN    R           118      0.890           0.856\n 2 B000575  Blunt      MO    R           128      0.906           0.787\n 3 B000944  Brown      OH    D           128      0.258           0.642\n 4 B001135  Burr       NC    R           121      0.893           0.560\n 5 B001230  Baldwin    WI    D           128      0.227           0.510\n 6 B001236  Boozman    AR    R           129      0.915           0.851\n 7 B001243  Blackburn  TN    R           131      0.885           0.889\n 8 B001261  Barrasso   WY    R           129      0.891           0.895\n 9 B001267  Bennet     CO    D           121      0.273           0.417\n10 B001277  Blumenthal CT    D           128      0.203           0.294\n# ℹ 112 more rows\n# ℹ 1 more variable: margin_trump <dbl>\n```\n:::\n:::\n\n\nThis is a good occasion to show how pipes allow us to chain operations. How do we read the following code out loud? (Remember that pipes are read as \"then\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, matches(\"agree\")) |> \n  rename(prop_agree = agree, prop_agree_pred = agree_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  prop_agree prop_agree_pred\n   <chr>           <dbl>           <dbl>\n 1 Alexander       0.890           0.856\n 2 Blunt           0.906           0.787\n 3 Brown           0.258           0.642\n 4 Burr            0.893           0.560\n 5 Baldwin         0.227           0.510\n 6 Boozman         0.915           0.851\n 7 Blackburn       0.885           0.889\n 8 Barrasso        0.891           0.895\n 9 Bennet          0.273           0.417\n10 Blumenthal      0.203           0.294\n# ℹ 112 more rows\n```\n:::\n:::\n\n\n### Creating columns\n\nIt is common to want to create columns, based on existing ones. We can use `mutate()` to do so. For example, we could want our main variables of interest in terms of percentages instead of proportions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, agree, agree_pred) |> # select just for clarity\n  mutate(pct_agree = 100 * agree,\n         pct_agree_pred = 100 * agree_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 5\n   last_name  agree agree_pred pct_agree pct_agree_pred\n   <chr>      <dbl>      <dbl>     <dbl>          <dbl>\n 1 Alexander  0.890      0.856      89.0           85.6\n 2 Blunt      0.906      0.787      90.6           78.7\n 3 Brown      0.258      0.642      25.8           64.2\n 4 Burr       0.893      0.560      89.3           56.0\n 5 Baldwin    0.227      0.510      22.7           51.0\n 6 Boozman    0.915      0.851      91.5           85.1\n 7 Blackburn  0.885      0.889      88.5           88.9\n 8 Barrasso   0.891      0.895      89.1           89.5\n 9 Bennet     0.273      0.417      27.3           41.7\n10 Blumenthal 0.203      0.294      20.3           29.4\n# ℹ 112 more rows\n```\n:::\n:::\n\n\nWe can also use multiple columns for creating a new one. For example, let's retrieve the total *number* of votes in which the senator agreed with Trump:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, num_votes, agree) |> # select just for clarity\n  mutate(num_votes_agree = num_votes * agree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 4\n   last_name  num_votes agree num_votes_agree\n   <chr>          <dbl> <dbl>           <dbl>\n 1 Alexander        118 0.890           105  \n 2 Blunt            128 0.906           116  \n 3 Brown            128 0.258            33  \n 4 Burr             121 0.893           108  \n 5 Baldwin          128 0.227            29  \n 6 Boozman          129 0.915           118  \n 7 Blackburn        131 0.885           116  \n 8 Barrasso         129 0.891           115  \n 9 Bennet           121 0.273            33.0\n10 Blumenthal       128 0.203            26  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n### Filtering rows\n\nAnother common operation is to filter rows based on logical conditions. We can do so with the `filter()` function. For example, we can filter to only get Democrats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(party == \"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>      <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 B000944  Brown      OH    D           128 0.258      0.642        8.13 \n 2 B001230  Baldwin    WI    D           128 0.227      0.510        0.764\n 3 B001267  Bennet     CO    D           121 0.273      0.417       -4.91 \n 4 B001277  Blumenthal CT    D           128 0.203      0.294      -13.6  \n 5 B001288  Booker     NJ    D           119 0.160      0.290      -14.1  \n 6 C000127  Cantwell   WA    D           128 0.242      0.276      -15.5  \n 7 C000141  Cardin     MD    D           128 0.25       0.209      -26.4  \n 8 C000174  Carper     DE    D           129 0.295      0.318      -11.4  \n 9 C001070  Casey      PA    D           129 0.287      0.508        0.724\n10 C001088  Coons      DE    D           128 0.289      0.319      -11.4  \n# ℹ 45 more rows\n```\n:::\n:::\n\n\nNotice that `==` here is a *logical operator*, read as \"is equal to.\" So our full chain of operations says the following: take `trump_scores`, then filter it to get rows where party is equal to \"D\".\n\nThere are other logical operators:\n\n| Logical operator | Meaning                       |\n|------------------|-------------------------------|\n| `==`             | \"is equal to\"                 |\n| `!=`             | \"is not equal to\"             |\n| `>`              | \"is greater than\"             |\n| `<`              | \"is less than\"                |\n| `>=`             | \"is greater than or equal to\" |\n| `<=`             | \"is less than or equal to\"    |\n| `%in%`           | \"is contained in\"             |\n| `&`              | \"and\" (intersection)          |\n| `|`              | \"or\" (union)                  |\n\nLet's see a couple of other examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(agree > 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 69 × 8\n   bioguide last_name state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 A000360  Alexander TN    R           118 0.890      0.856        26.0 \n 2 B000575  Blunt     MO    R           128 0.906      0.787        18.6 \n 3 B001135  Burr      NC    R           121 0.893      0.560         3.66\n 4 B001236  Boozman   AR    R           129 0.915      0.851        26.9 \n 5 B001243  Blackburn TN    R           131 0.885      0.889        26.0 \n 6 B001261  Barrasso  WY    R           129 0.891      0.895        46.3 \n 7 B001310  Braun     IN    R            44 0.909      0.713        19.2 \n 8 C000567  Cochran   MS    R            68 0.971      0.830        17.8 \n 9 C000880  Crapo     ID    R           125 0.904      0.870        31.8 \n10 C001035  Collins   ME    R           129 0.651      0.441        -2.96\n# ℹ 59 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(state %in% c(\"CA\", \"TX\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 8\n  bioguide last_name state party num_votes agree agree_pred margin_trump\n  <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n1 C001056  Cornyn    TX    R           129 0.922      0.659         9.00\n2 C001098  Cruz      TX    R           126 0.921      0.663         9.00\n3 F000062  Feinstein CA    D           128 0.242      0.201       -30.1 \n4 H001075  Harris    CA    D           116 0.164      0.209       -30.1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(state == \"WV\" & party == \"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  bioguide last_name state party num_votes agree agree_pred margin_trump\n  <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n1 M001183  Manchin   WV    D           129 0.504      0.893         42.2\n```\n:::\n:::\n\n\n::: callout-note\n#### Exercise\n\n1. Add a new column to the data frame, called `diff_agree`, which substracts `agree` and `agree_pred`. Remember to use the assignment operator (`<-`)! Your code:\n\n2. Filter the data frame to only get senators for which we have information on fewer than (or equal to) five votes. Your code:\n\n3. Filter the data frame to only get Democrats who agreed with Trump in at least 30% of votes. Your code:\n\n:::\n\n### Ordering rows\n\n\n\n### Summarizing data\n\n### Overview\n\n## Visualizing data with `ggplot2`\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
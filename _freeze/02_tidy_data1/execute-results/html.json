{
  "hash": "1cc114154be0bc52cdbeb0a589210493",
  "result": {
    "markdown": "---\nnocite: |\n  @usda2019, @fivethirtyeight2021\n---\n\n\n# Tidy data analysis I\n\nThe [`tidyverse`](https://www.tidyverse.org/) is a suite of packages that streamline data analysis in R. After installing the `tidyverse` with `install.packages(\"tidyverse\")` (see the previous module), you can load it with:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n::: callout-tip\nUpon loading, the `tidyverse` prints a message like the one above. Notice that multiple packages (the constituent elements of the \"suite\") are actually loaded. For instance, `dplyr` and `tidyr` help with data transformation and wrangling, while `ggplot2` allows us to draw plots. In most cases, one just loads the `tidyverse` and forgets about these details, as the constituent packages work together nicely.\n:::\n\nThroughout this module, we will use `tidyverse` functions to load, wrangle, and visualize real data.\n\n## Loading data\n\nThroughout this module we will work with a dataset of senators during the Trump presidency, which was adapted from [FiveThirtyEight (2021)](https://projects.fivethirtyeight.com/congress-trump-score/).\n\nWe have stored the dataset in .csv format under the `data/` subfolder. Loading it into R is simple (notice that we need to assign it to an object):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores <- read_csv(\"data/trump_scores_538.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 122 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): bioguide, last_name, state, party\ndbl (4): num_votes, agree, agree_pred, margin_trump\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>      <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 A000360  Alexander  TN    R           118 0.890      0.856       26.0  \n 2 B000575  Blunt      MO    R           128 0.906      0.787       18.6  \n 3 B000944  Brown      OH    D           128 0.258      0.642        8.13 \n 4 B001135  Burr       NC    R           121 0.893      0.560        3.66 \n 5 B001230  Baldwin    WI    D           128 0.227      0.510        0.764\n 6 B001236  Boozman    AR    R           129 0.915      0.851       26.9  \n 7 B001243  Blackburn  TN    R           131 0.885      0.889       26.0  \n 8 B001261  Barrasso   WY    R           129 0.891      0.895       46.3  \n 9 B001267  Bennet     CO    D           121 0.273      0.417       -4.91 \n10 B001277  Blumenthal CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nLet's review the dataset's columns:\n\n-   `bioguide`: A unique ID for each politician, from the Congress Bioguide.\n-   `last_name`\n-   `state`\n-   `party`\n-   `num_votes`: Number of votes for which data was available.\n-   `agree`: Proportion (0-1) of votes in which the senator voted in agreement with Trump.\n-   `agree_pred`: Predicted proportion of vote agreement, calculated using Trump's margin (see next variable).\n-   `margin_trump`: Margin of victory (percentage points) of Trump in the senator's state.\n\nWe can inspect our data by using the interface above. An alternative is to run the command `View(trump_scores)` or click on the object in RStudio's environment panel (in the top-right section).\n\nDo you have any questions about the data?\n\nBy the way, the `tidyverse` works amazingly with *tidy data*. If you can get your data to this format (and we will see ways to do this), your life will be much easier:\n\n::: {layout-nrow=\"2\"}\n![](images/tidy_data.jpg)\n\n![Source: Illustrations from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst.](images/tidy_data2.jpg)\n:::\n\n## Wrangling data with `dplyr`\n\nWe often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the `tidyverse`, these operations are conducted with multiple *verbs*, which we will review now.\n\n### Selecting columns\n\nWe can select specific columns in our dataset with the `select()` function. All `dplyr` wrangling verbs take a data frame as their first argument---in this case, the columns we want to select are the other arguments.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nselect(trump_scores, last_name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 2\n   last_name  party\n   <chr>      <chr>\n 1 Alexander  R    \n 2 Blunt      R    \n 3 Brown      D    \n 4 Burr       R    \n 5 Baldwin    D    \n 6 Boozman    R    \n 7 Blackburn  R    \n 8 Barrasso   R    \n 9 Bennet     D    \n10 Blumenthal D    \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nThis is a good moment to talk about \"pipes.\" Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (`|>`) \"kick\" the object on the left of the pipe to the first argument of the function on the right. One can read pipes as \"then,\" so the code below can be read as \"take `trump_scores`, then select the columns `last_name` and `party`.\" Pipes are very useful to *chain multiple operations*, as we will see in a moment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 2\n   last_name  party\n   <chr>      <chr>\n 1 Alexander  R    \n 2 Blunt      R    \n 3 Brown      D    \n 4 Burr       R    \n 5 Baldwin    D    \n 6 Boozman    R    \n 7 Blackburn  R    \n 8 Barrasso   R    \n 9 Bennet     D    \n10 Blumenthal D    \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n::: callout-tip\nYou can insert a pipe with the `Cmd/Ctrl + Shift + M` shortcut. If you have not changed the default RStudio settings, an \"old\" pipe (`%>%`) might appear. While most of the functionality is the same, the `|>` \"new\" pipes are more readable. You can change this RStudio option in `Tools > Global Options > Code > Use native pipe operator`. Make sure to check the other suggested settings in our [Setup module](/00_setup.html)!\n:::\n\nGoing back to selecting columns, you can select ranges:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(bioguide:party)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 4\n   bioguide last_name  state party\n   <chr>    <chr>      <chr> <chr>\n 1 A000360  Alexander  TN    R    \n 2 B000575  Blunt      MO    R    \n 3 B000944  Brown      OH    D    \n 4 B001135  Burr       NC    R    \n 5 B001230  Baldwin    WI    D    \n 6 B001236  Boozman    AR    R    \n 7 B001243  Blackburn  TN    R    \n 8 B001261  Barrasso   WY    R    \n 9 B001267  Bennet     CO    D    \n10 B001277  Blumenthal CT    D    \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nAnd use a few helper functions, like `matches()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, matches(\"agree\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  agree agree_pred\n   <chr>      <dbl>      <dbl>\n 1 Alexander  0.890      0.856\n 2 Blunt      0.906      0.787\n 3 Brown      0.258      0.642\n 4 Burr       0.893      0.560\n 5 Baldwin    0.227      0.510\n 6 Boozman    0.915      0.851\n 7 Blackburn  0.885      0.889\n 8 Barrasso   0.891      0.895\n 9 Bennet     0.273      0.417\n10 Blumenthal 0.203      0.294\n# ℹ 112 more rows\n```\n:::\n:::\n\n\nOr `everything()`, which we usually use to reorder columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, everything())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   last_name  bioguide state party num_votes agree agree_pred margin_trump\n   <chr>      <chr>    <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 Alexander  A000360  TN    R           118 0.890      0.856       26.0  \n 2 Blunt      B000575  MO    R           128 0.906      0.787       18.6  \n 3 Brown      B000944  OH    D           128 0.258      0.642        8.13 \n 4 Burr       B001135  NC    R           121 0.893      0.560        3.66 \n 5 Baldwin    B001230  WI    D           128 0.227      0.510        0.764\n 6 Boozman    B001236  AR    R           129 0.915      0.851       26.9  \n 7 Blackburn  B001243  TN    R           131 0.885      0.889       26.0  \n 8 Barrasso   B001261  WY    R           129 0.891      0.895       46.3  \n 9 Bennet     B001267  CO    D           121 0.273      0.417       -4.91 \n10 Blumenthal B001277  CT    D           128 0.203      0.294      -13.6  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n::: callout-tip\nNotice that all these commands have not edited our existent objects---they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (`<-`). For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_reduced <- trump_scores |> \n  select(last_name, matches(\"agree\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_reduced\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  agree agree_pred\n   <chr>      <dbl>      <dbl>\n 1 Alexander  0.890      0.856\n 2 Blunt      0.906      0.787\n 3 Brown      0.258      0.642\n 4 Burr       0.893      0.560\n 5 Baldwin    0.227      0.510\n 6 Boozman    0.915      0.851\n 7 Blackburn  0.885      0.889\n 8 Barrasso   0.891      0.895\n 9 Bennet     0.273      0.417\n10 Blumenthal 0.203      0.294\n# ℹ 112 more rows\n```\n:::\n:::\n\n:::\n\n::: callout-note\n#### Exercise\n\nSelect the variables `last_name`, `party`, `num_votes`, and `agree` from the data frame. Your code:\n:::\n\n### Renaming columns\n\nWe can use the `rename()` function to rename columns, with the syntax `new_name = old_name`. For example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  rename(prop_agree = agree, prop_agree_pred = agree_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   bioguide last_name  state party num_votes prop_agree prop_agree_pred\n   <chr>    <chr>      <chr> <chr>     <dbl>      <dbl>           <dbl>\n 1 A000360  Alexander  TN    R           118      0.890           0.856\n 2 B000575  Blunt      MO    R           128      0.906           0.787\n 3 B000944  Brown      OH    D           128      0.258           0.642\n 4 B001135  Burr       NC    R           121      0.893           0.560\n 5 B001230  Baldwin    WI    D           128      0.227           0.510\n 6 B001236  Boozman    AR    R           129      0.915           0.851\n 7 B001243  Blackburn  TN    R           131      0.885           0.889\n 8 B001261  Barrasso   WY    R           129      0.891           0.895\n 9 B001267  Bennet     CO    D           121      0.273           0.417\n10 B001277  Blumenthal CT    D           128      0.203           0.294\n# ℹ 112 more rows\n# ℹ 1 more variable: margin_trump <dbl>\n```\n:::\n:::\n\n\nThis is a good occasion to show how pipes allow us to chain operations. How do we read the following code out loud? (Remember that pipes are read as \"then\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, matches(\"agree\")) |> \n  rename(prop_agree = agree, prop_agree_pred = agree_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 3\n   last_name  prop_agree prop_agree_pred\n   <chr>           <dbl>           <dbl>\n 1 Alexander       0.890           0.856\n 2 Blunt           0.906           0.787\n 3 Brown           0.258           0.642\n 4 Burr            0.893           0.560\n 5 Baldwin         0.227           0.510\n 6 Boozman         0.915           0.851\n 7 Blackburn       0.885           0.889\n 8 Barrasso        0.891           0.895\n 9 Bennet          0.273           0.417\n10 Blumenthal      0.203           0.294\n# ℹ 112 more rows\n```\n:::\n:::\n\n\n### Creating columns\n\nIt is common to want to create columns, based on existing ones. We can use `mutate()` to do so. For example, we could want our main variables of interest in terms of percentages instead of proportions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, agree, agree_pred) |> # select just for clarity\n  mutate(pct_agree = 100 * agree,\n         pct_agree_pred = 100 * agree_pred)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 5\n   last_name  agree agree_pred pct_agree pct_agree_pred\n   <chr>      <dbl>      <dbl>     <dbl>          <dbl>\n 1 Alexander  0.890      0.856      89.0           85.6\n 2 Blunt      0.906      0.787      90.6           78.7\n 3 Brown      0.258      0.642      25.8           64.2\n 4 Burr       0.893      0.560      89.3           56.0\n 5 Baldwin    0.227      0.510      22.7           51.0\n 6 Boozman    0.915      0.851      91.5           85.1\n 7 Blackburn  0.885      0.889      88.5           88.9\n 8 Barrasso   0.891      0.895      89.1           89.5\n 9 Bennet     0.273      0.417      27.3           41.7\n10 Blumenthal 0.203      0.294      20.3           29.4\n# ℹ 112 more rows\n```\n:::\n:::\n\n\nWe can also use multiple columns for creating a new one. For example, let's retrieve the total *number* of votes in which the senator agreed with Trump:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  select(last_name, num_votes, agree) |> # select just for clarity\n  mutate(num_votes_agree = num_votes * agree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 4\n   last_name  num_votes agree num_votes_agree\n   <chr>          <dbl> <dbl>           <dbl>\n 1 Alexander        118 0.890           105  \n 2 Blunt            128 0.906           116  \n 3 Brown            128 0.258            33  \n 4 Burr             121 0.893           108  \n 5 Baldwin          128 0.227            29  \n 6 Boozman          129 0.915           118  \n 7 Blackburn        131 0.885           116  \n 8 Barrasso         129 0.891           115  \n 9 Bennet           121 0.273            33.0\n10 Blumenthal       128 0.203            26  \n# ℹ 112 more rows\n```\n:::\n:::\n\n\n### Filtering rows\n\nAnother common operation is to filter rows based on logical conditions. We can do so with the `filter()` function. For example, we can filter to only get Democrats:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(party == \"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 55 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>      <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 B000944  Brown      OH    D           128 0.258      0.642        8.13 \n 2 B001230  Baldwin    WI    D           128 0.227      0.510        0.764\n 3 B001267  Bennet     CO    D           121 0.273      0.417       -4.91 \n 4 B001277  Blumenthal CT    D           128 0.203      0.294      -13.6  \n 5 B001288  Booker     NJ    D           119 0.160      0.290      -14.1  \n 6 C000127  Cantwell   WA    D           128 0.242      0.276      -15.5  \n 7 C000141  Cardin     MD    D           128 0.25       0.209      -26.4  \n 8 C000174  Carper     DE    D           129 0.295      0.318      -11.4  \n 9 C001070  Casey      PA    D           129 0.287      0.508        0.724\n10 C001088  Coons      DE    D           128 0.289      0.319      -11.4  \n# ℹ 45 more rows\n```\n:::\n:::\n\n\nNotice that `==` here is a *logical operator*, read as \"is equal to.\" So our full chain of operations says the following: take `trump_scores`, then filter it to get rows where party is equal to \"D\".\n\nThere are other logical operators:\n\n| Logical operator | Meaning                       |\n|------------------|-------------------------------|\n| `==`             | \"is equal to\"                 |\n| `!=`             | \"is not equal to\"             |\n| `>`              | \"is greater than\"             |\n| `<`              | \"is less than\"                |\n| `>=`             | \"is greater than or equal to\" |\n| `<=`             | \"is less than or equal to\"    |\n| `%in%`           | \"is contained in\"             |\n| `&`              | \"and\" (intersection)          |\n| `|`              | \"or\" (union)                  |\n\nLet's see a couple of other examples.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(agree > 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 69 × 8\n   bioguide last_name state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 A000360  Alexander TN    R           118 0.890      0.856        26.0 \n 2 B000575  Blunt     MO    R           128 0.906      0.787        18.6 \n 3 B001135  Burr      NC    R           121 0.893      0.560         3.66\n 4 B001236  Boozman   AR    R           129 0.915      0.851        26.9 \n 5 B001243  Blackburn TN    R           131 0.885      0.889        26.0 \n 6 B001261  Barrasso  WY    R           129 0.891      0.895        46.3 \n 7 B001310  Braun     IN    R            44 0.909      0.713        19.2 \n 8 C000567  Cochran   MS    R            68 0.971      0.830        17.8 \n 9 C000880  Crapo     ID    R           125 0.904      0.870        31.8 \n10 C001035  Collins   ME    R           129 0.651      0.441        -2.96\n# ℹ 59 more rows\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(state %in% c(\"CA\", \"TX\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 4 × 8\n  bioguide last_name state party num_votes agree agree_pred margin_trump\n  <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n1 C001056  Cornyn    TX    R           129 0.922      0.659         9.00\n2 C001098  Cruz      TX    R           126 0.921      0.663         9.00\n3 F000062  Feinstein CA    D           128 0.242      0.201       -30.1 \n4 H001075  Harris    CA    D           116 0.164      0.209       -30.1 \n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(state == \"WV\" & party == \"D\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 8\n  bioguide last_name state party num_votes agree agree_pred margin_trump\n  <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n1 M001183  Manchin   WV    D           129 0.504      0.893         42.2\n```\n:::\n:::\n\n\n::: callout-note\n#### Exercise\n\n1.  Add a new column to the data frame, called `diff_agree`, which subtracts `agree` and `agree_pred`. How would you create `abs_diff_agree`, defined as the absolute value of `diff_agree`? Your code:\n\n2.  Filter the data frame to only get senators for which we have information on fewer than (or equal to) five votes. Your code:\n\n3.  Filter the data frame to only get Democrats who agreed with Trump in at least 30% of votes. Your code:\n:::\n\n### Ordering rows\n\nThe `arrange()` function allows us to order rows according to values. For example, let's order based on the `agree` variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  arrange(agree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 122 × 8\n   bioguide last_name    state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>        <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 H000273  Hickenlooper CO    D             2 0         0.0302        -4.91\n 2 H000601  Hagerty      TN    R             2 0         0.115         26.0 \n 3 L000570  Luján        NM    D           186 0.124     0.243         -8.21\n 4 G000555  Gillibrand   NY    D           121 0.124     0.242        -22.5 \n 5 M001176  Merkley      OR    D           129 0.155     0.323        -11.0 \n 6 W000817  Warren       MA    D           116 0.155     0.216        -27.2 \n 7 B001288  Booker       NJ    D           119 0.160     0.290        -14.1 \n 8 S000033  Sanders      VT    D           112 0.161     0.221        -26.4 \n 9 H001075  Harris       CA    D           116 0.164     0.209        -30.1 \n10 M000133  Markey       MA    D           127 0.165     0.213        -27.2 \n# ℹ 112 more rows\n```\n:::\n:::\n\n\nMaybe we only want senators with more than a few data points. Remember that we can chain operations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(num_votes >= 10) |> \n  arrange(agree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 115 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>      <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 L000570  Luján      NM    D           186 0.124      0.243        -8.21\n 2 G000555  Gillibrand NY    D           121 0.124      0.242       -22.5 \n 3 M001176  Merkley    OR    D           129 0.155      0.323       -11.0 \n 4 W000817  Warren     MA    D           116 0.155      0.216       -27.2 \n 5 B001288  Booker     NJ    D           119 0.160      0.290       -14.1 \n 6 S000033  Sanders    VT    D           112 0.161      0.221       -26.4 \n 7 H001075  Harris     CA    D           116 0.164      0.209       -30.1 \n 8 M000133  Markey     MA    D           127 0.165      0.213       -27.2 \n 9 W000779  Wyden      OR    D           129 0.186      0.323       -11.0 \n10 B001277  Blumenthal CT    D           128 0.203      0.294       -13.6 \n# ℹ 105 more rows\n```\n:::\n:::\n\n\nBy default, `arrange()` uses increasing order (like `sort()`). To use decreasing order, add a minus sign:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(num_votes >= 10) |> \n  arrange(-agree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 115 × 8\n   bioguide last_name state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>     <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 M001198  Marshall  KS    R           183 0.973      0.933        20.6 \n 2 C000567  Cochran   MS    R            68 0.971      0.830        17.8 \n 3 H000338  Hatch     UT    R            84 0.964      0.825        18.1 \n 4 M001197  McSally   AZ    R           136 0.949      0.562         3.55\n 5 P000612  Perdue    GA    R           119 0.941      0.606         5.16\n 6 C001096  Cramer    ND    R           135 0.941      0.908        35.7 \n 7 R000307  Roberts   KS    R           127 0.937      0.818        20.6 \n 8 C001056  Cornyn    TX    R           129 0.922      0.659         9.00\n 9 H001061  Hoeven    ND    R           129 0.922      0.883        35.7 \n10 C001047  Capito    WV    R           127 0.921      0.896        42.2 \n# ℹ 105 more rows\n```\n:::\n:::\n\n\nYou can also order rows by more than one variable. What this does is to order by the first variable, and resolve any ties by ordering by the second variable (and so forth if you have more than two ordering variables). For example, let's first order our data frame by party, and then within party order by agreement with Trump:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(num_votes >= 10) |> \n  arrange(party, agree)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 115 × 8\n   bioguide last_name  state party num_votes agree agree_pred margin_trump\n   <chr>    <chr>      <chr> <chr>     <dbl> <dbl>      <dbl>        <dbl>\n 1 L000570  Luján      NM    D           186 0.124      0.243        -8.21\n 2 G000555  Gillibrand NY    D           121 0.124      0.242       -22.5 \n 3 M001176  Merkley    OR    D           129 0.155      0.323       -11.0 \n 4 W000817  Warren     MA    D           116 0.155      0.216       -27.2 \n 5 B001288  Booker     NJ    D           119 0.160      0.290       -14.1 \n 6 S000033  Sanders    VT    D           112 0.161      0.221       -26.4 \n 7 H001075  Harris     CA    D           116 0.164      0.209       -30.1 \n 8 M000133  Markey     MA    D           127 0.165      0.213       -27.2 \n 9 W000779  Wyden      OR    D           129 0.186      0.323       -11.0 \n10 B001277  Blumenthal CT    D           128 0.203      0.294       -13.6 \n# ℹ 105 more rows\n```\n:::\n:::\n\n\n::: callout-note\n#### Exercise\n\nArrange the data by `diff_pred`, the difference between agreement and predicted agreement with Trump. (You should have code on how to create this variable from the last exercise). Your code:\n:::\n\n### Summarizing data\n\n`dplyr` makes summarizing data a breeze using the `summarize()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  summarize(mean_agree = mean(agree),\n            mean_agree_pred = mean(agree_pred))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  mean_agree mean_agree_pred\n       <dbl>           <dbl>\n1      0.592           0.572\n```\n:::\n:::\n\n\nTo make summaries, we can use any function that takes a vector and returns one value. Another example:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(num_votes >= 5) |> # to filter out senators with few data points\n  summarize(max_agree = max(agree),\n            min_agree = min(agree))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  max_agree min_agree\n      <dbl>     <dbl>\n1         1     0.124\n```\n:::\n:::\n\n\n*Grouped summaries* allow us to disaggregate summaries according to other variables (usually categorical):\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores |> \n  filter(num_votes >= 5) |> # to filter out senators with few data points\n  summarize(mean_agree = mean(agree),\n            max_agree = max(agree),\n            min_agree = min(agree),\n            .by = party) # to group by party\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 4\n  party mean_agree max_agree min_agree\n  <chr>      <dbl>     <dbl>     <dbl>\n1 R          0.876     1         0.651\n2 D          0.272     0.548     0.124\n```\n:::\n:::\n\n\n::: callout-note\n#### Exercise\n\nObtain the maximum absolute difference in agreement with Trump (the `abs_diff_agree` variable from before) for each party.\n:::\n\n### Overview\n\n| Function               | Purpose                      |\n|------------------------|------------------------------|\n| `select()`             | Select columns               |\n| `rename()`             | Rename columns               |\n| `mutate()`             | Creating columns             |\n| `filter()`             | Filtering rows               |\n| `arrange()`            | Ordering rows                |\n| `summarize()`          | Summarizing data             |\n| `summarize(…, .by = )` | Summarizing data (by groups) |\n\n## Visualizing data with `ggplot2`\n\n`ggplot2` is the package in charge of data visualization in the `tidyverse`. It is extremely flexible and allows us to draw bar plots, box plots, histograms, scatter plots, and many other types of plots (see [examples at R Charts](https://r-charts.com/ggplot2/)).\n\nThroughout this module we will use a subset of our data frame, which only includes senators with more than a few data points:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrump_scores_ss <- trump_scores |> \n  filter(num_votes >= 10)\n```\n:::\n\n\nThe `ggplot2` syntax provides a unifying interface (the \"grammar of graphics\" or \"gg\") for drawing all different types of plots. One draws plots by adding different \"layers,\" and the core code always includes the following:\n\n-   A `ggplot()` command with a `data =` argument specifying a data frame and a `mapping = aes()` argument specifying \"aesthetic mappings,\" i.e., how we want to use the columns in the data frame in the plot (for example, in the x-axis, as color, etc.).\n\n-   \"geoms,\" such as `geom_bar()` or `geom_point()`, specifying what to draw on the plot.\n\nSo *all* `ggplot2` commands will have at least three elements: data, aesthetic mappings, and geoms.\n\n### Univariate plots: categorical\n\nLet's see an example of a bar plot with a categorical variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = trump_scores_ss, mapping = aes(x = party)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n::: callout-tip\nAs with any other function, we can drop the argument names if we specify the argument values in order. This is common in `ggplot2` code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = party)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n:::\n\nNotice how `geom_bar()` automatically computes the number of observations in each category for us. Sometimes we want to use numbers in our data frame as part of a bar plot. Here we can use the `geom_col()` geom specifying both `x` and `y` aesthetic mappings, in which is sometimes called a \"column plot:\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss |> filter(state == \"ME\"),\n       aes(x = last_name, y = agree)) +\n  geom_col()\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Exercise\n\nDraw a column plot with the agreement with Trump of Bernie Sanders and Ted Cruz. What happens if you use `last_name` as the `y` aesthetic mapping and `agree` in the `x` aesthetic mapping? Your code:\n:::\n\n### Univariate plots: numerical\n\nWe can draw a histogram with `geom_histogram()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = agree)) +\n  geom_histogram()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n```\n:::\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\nNotice the warning message above. It's telling us that, by default, `geom_histogram()` will draw 30 bins. Sometimes we want to modify this behavior. The following code has some common options for `geom_histogram()` and their explanations:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = agree)) +\n  geom_histogram(binwidth = 0.05,   # draw bins every 0.05 jumps in x\n                 boundary = 0,      # don't shift bins to integers\n                 closed   = \"left\") # close bins on the left\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nSometimes we want to manually alter a scale. Here we use . For example, to make the x-axis go from 0 to 1:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = agree)) +\n  geom_histogram(binwidth = 0.05, boundary = 0, closed   = \"left\") +   \n  scale_x_continuous(limits = c(0, 1))\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\nAdding the `fill` aesthetic mapping to a histogram will divide it according to a categorical variable. This is actually a bivariate plot!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = agree, fill = party)) +\n  geom_histogram(binwidth = 0.05, boundary = 0, closed   = \"left\") +   \n  scale_x_continuous(limits = c(0, 1)) +\n  # change default colors:\n  scale_fill_manual(values = c(\"D\" = \"blue\", \"R\" = \"red\"))\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n### Bivariate plots\n\nAnother common bivariate plot for categorical and numerical variables is the grouped box plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = agree, y = party)) +\n  geom_boxplot() +\n  scale_x_continuous(limits = c(0, 1)) # same change as before\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nFor bivariate plots of numerical variables, scatter plots are made with `geom_point()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = margin_trump, y = agree)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\nWe can add the `color` aesthetic mapping to add a third variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores_ss, aes(x = margin_trump, y = agree, color = party)) +\n  geom_point() +\n  scale_color_manual(values = c(\"D\" = \"blue\", \"R\" = \"red\"))\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\nLet's finish our plot with the `labs()` function, which allows us to add labels to our aesthetic mappings, as well as titles and notes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(trump_scores, aes(x = margin_trump, y = agree, color = party)) +\n  geom_point() +\n  scale_color_manual(values = c(\"D\" = \"blue\", \"R\" = \"red\")) +\n  labs(x = \"Trump margin in the senator's state (p.p.)\",\n       y = \"Votes in agreement with Trump (prop.)\",\n       color = \"Party\",\n       title = \"Relationship between Trump margins and senators' votes\",\n       caption = \"Data source: FiveThirtyEight (2021)\")\n```\n\n::: {.cell-output-display}\n![](02_tidy_data1_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nWe will review a few more customization options, including text labels and facets, in a subsequent module.\n",
    "supporting": [
      "02_tidy_data1_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
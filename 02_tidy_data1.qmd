# Tidy data analysis I

The [`tidyverse`](https://www.tidyverse.org/) is a suite of packages that streamline data analysis in R. After installing the `tidyverse` with `install.packages("tidyverse")` (see the previous module), you can load it with:

```{r}
library(tidyverse)
```

::: {.callout-tip}

Upon loading, the `tidyverse` prints a message like the one above. Notice that multiple packages (the constituent elements of the "suite") are actually loaded. For instance, `dplyr` and `tidyr` help with data transformation and wrangling, while `ggplot2` allows us to draw plots. In most cases, one just loads the `tidyverse` and forgets about these details, as the constituent packages work together nicely.

:::

Throughout this module, we will use `tidyverse` functions to load, wrangle, and visualize real data. 

## Loading data

Throughout this module we will work with a dataset of senators during the Trump presidency, which was adapted from [FiveThirtyEight (2021)](https://projects.fivethirtyeight.com/congress-trump-score/).

We have stored the dataset in .csv format under the `data/` subfolder. Loading it into R is simple (notice that we need to assign it to an object):

```{r}
trump_scores <- read_csv("data/trump_scores_538.csv")
```

```{r}
trump_scores # a "tibble" is a data frame in the tidyverse lingo
```

Let's review the dataset's columns:

- `id_bioguide`: A unique ID for each politician, from the Congress Bioguide.
- `last_name`
- `state`
- `party`
- `num_votes`: Number of votes for which data was available.
- `agree_trump`: Proportion (0-1) of votes in which the senator voted in agreement with Trump.
- `margin_trump`: Margin of victory (percentage points) of Trump in the senator's state.

We can inspect our data by using the interface above. An alternative is to run the command `View(trump_scores)` or click on the object in RStudio's environment panel (in the top-right section).

Do you have any questions about the data?

## Wrangling data with `dplyr`

We often need to modify data to conduct our analyses, e.g., creating columns, filtering rows, etc. In the `tidyverse`, these operations are conducted with multiple *verbs*, which we will review now. 

### Selecting columns

We can select specific columns in our dataset with the `select()` function.

```{r}
select(trump_scores, last_name, party)
```

All `dplyr` wrangling verbs take a data frame as their first argument. 

This is a good moment to introduce the concept of "pipes." Notice how the code below produces the same output as the one above, but with a slightly different syntax. Pipes (`|>`) "kick" the object on the left of the pipe to the first argument of the function on the right. One can read pipes as "then," so the code below can be read as "take `trump_scores`, then select the columns `last_name` and `party`." Pipes are very useful to *chain multiple operations*, as we will see in a moment.

```{r}
trump_scores |> select(last_name, party)
```

::: {.callout-tip}

You can insert a pipe with the `Cmd/Ctrl + Shift + M` shortcut. If you have not changed the default RStudio settings, an "old" pipe (`%>%`) might appear. While most of the functionality is the same, the `|>` "new" pipes are more readable. You can change this RStudio option in `Tools > Global Options > Code > Use native pipe operator`. Make sure to check the other suggested settings in our [Setup module](/00_setup.html)!

:::


Going back to selecting columns, you can select ranges:

```{r}
trump_scores |> select(id_bioguide:party)
```

And use a few helper functions, like `matches()`:

```{r}
trump_scores |> select(last_name, matches("trump"))
```

Or `everything()`, which we usually use to reorder columns:

```{r}
trump_scores |> select(last_name, everything())
```

::: {.callout-tip}

Notice that all these commands have not edited our existent objects---they have just printed the requested outputs to the screen. In order to modify objects, you need to use the assignment operator (`<-`). For example:

```{r}
trump_scores_reduced <- trump_scores |> select(last_name, matches("trump"))
```

```{r}
trump_scores_reduced
```

:::

### Renaming columns

We can use the `rename()` function to rename columns, with the syntax `new_name = old_name`. For example:

```{r}
trump_scores |> rename(prop_agree_trump = agree_trump)
```

This is a good occasion to show how pipes can chain operations. How do we read the following code out loud? (Remember that pipes are read as "then").

```{r}
trump_scores |> 
  select(last_name, matches("trump")) |> 
  rename(prop_agree_trump = agree_trump)
```

### Creating columns

### Filtering rows

### Summarizing data

### Overview

## Visualizing data with `ggplot2`

